[assembly: System.CLSCompliantAttribute(true)]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus_6.AcceptanceTesting, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus_6.Core.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus_6.Hosting.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus_6.PerformanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.5.2", FrameworkDisplayName=".NET Framework 4.5.2")]
public class static ConfigureHandlerSettings
{
    [System.ObsoleteAttribute("Setting property values explicitly is no longer supported via this API. Use `.Con" +
        "figureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full contro" +
        "l over handler creation. Will be removed in version 7.0.0.", true)]
    public static void InitializeHandlerProperty<THandler>(this NServiceBus_6.EndpointConfiguration config, string property, object value) { }
}
namespace NServiceBus_6
{
    [System.ObsoleteAttribute("Use the string based overloads. Will be removed in version 7.0.0.", true)]
    public class Address
    {
        public Address() { }
    }
    public enum AddressMode
    {
        Local = 0,
        Remote = 1,
    }
    [System.ObsoleteAttribute("Use `EndpointConfiguration.ExcludeAssemblies` instead. Will be removed in version" +
        " 7.0.0.", true)]
    public class AllAssemblies
    {
        public AllAssemblies() { }
    }
    public class AssemblyScannerConfiguration
    {
        public AssemblyScannerConfiguration() { }
        public bool ScanAppDomainAssemblies { get; set; }
        public bool ScanAssembliesInNestedDirectories { get; set; }
        public bool ThrowExceptions { get; set; }
        public void ExcludeAssemblies(params string[] assemblies) { }
        public void ExcludeTypes(params System.Type[] types) { }
    }
    public class static AssemblyScannerConfigurationExtensions
    {
        public static NServiceBus_6.AssemblyScannerConfiguration AssemblyScanner(this NServiceBus_6.EndpointConfiguration configuration) { }
    }
    public class static AuditConfigReader
    {
        public static bool TryGetAuditQueueAddress(this NServiceBus_6.Settings.ReadOnlySettings settings, out string address) { }
    }
    public class static AutoSubscribeSettingsExtensions
    {
        public static NServiceBus_6.AutomaticSubscriptions.Config.AutoSubscribeSettings AutoSubscribe(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class static BestPracticesOptionExtensions
    {
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Pipeline.IOutgoingReplyContext context) { }
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Pipeline.IOutgoingSendContext context) { }
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Pipeline.ISubscribeContext context) { }
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Pipeline.IOutgoingPublishContext context) { }
        public static void DoNotEnforceBestPractices(this NServiceBus_6.Pipeline.IUnsubscribeContext context) { }
        public static bool IgnoredBestPractices(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
    }
    public class static Bus
    {
        [System.ObsoleteAttribute("Use `Endpoint.Create` instead. The member currently throws a NotImplementedExcept" +
            "ion. Will be removed in version 7.0.0.", true)]
        public static NServiceBus_6.IStartableBus Create(NServiceBus_6.EndpointConfiguration configuration) { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.SendOnly` instead. The member currently throws a NotIm" +
            "plementedException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus_6.IBus CreateSendOnly(NServiceBus_6.EndpointConfiguration configuration) { }
    }
    [System.ObsoleteAttribute("No longer used, use the new callbacks api described in the version 6 upgrade guid" +
        "e. Will be removed in version 7.0.0.", true)]
    public class BusAsyncResultEventArgs
    {
        public BusAsyncResultEventArgs() { }
    }
    [System.ObsoleteAttribute("Use `EndpointConfiguration` instead. Will be removed in version 7.0.0.", true)]
    public class BusConfiguration
    {
        public BusConfiguration() { }
    }
    [System.ObsoleteAttribute("Use `Notifications` instead. Will be removed in version 7.0.0.", true)]
    public class BusNotifications
    {
        public BusNotifications() { }
    }
    [System.ObsoleteAttribute("Replaced by NServiceBus_6.Callbacks package. Will be removed in version 7.0.0.", true)]
    public class CompletionResult
    {
        public CompletionResult() { }
    }
    public class static ConfigurationTimeoutExtensions
    {
        public static void TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(this NServiceBus_6.EndpointConfiguration config, System.TimeSpan timeToWait) { }
    }
    [System.ObsoleteAttribute("This is no longer a public API. Will be removed in version 7.0.0.", true)]
    public class Configure
    {
        public Configure() { }
    }
    public class static ConfigureAudit
    {
        public static void AuditProcessedMessagesTo(this NServiceBus_6.EndpointConfiguration config, string auditQueue, System.Nullable<System.TimeSpan> timeToBeReceived = null) { }
    }
    public class static ConfigureCriticalErrorAction
    {
        public static void DefineCriticalErrorAction(this NServiceBus_6.EndpointConfiguration endpointConfiguration, System.Func<NServiceBus_6.ICriticalErrorContext, System.Threading.Tasks.Task> onCriticalError) { }
        [System.ObsoleteAttribute("Use `ConfigureCriticalErrorAction.DefineCriticalErrorAction(EndpointConfiguration" +
            ", Func<ICriticalErrorContext, Task>)` instead. Will be removed in version 7.0.0." +
            "", true)]
        public static void DefineCriticalErrorAction(this NServiceBus_6.EndpointConfiguration endpointConfiguration, System.Action<string, System.Exception> onCriticalError) { }
    }
    public class static ConfigureError
    {
        public static void SendFailedMessagesTo(this NServiceBus_6.EndpointConfiguration config, string errorQueue) { }
    }
    public class static ConfigureFileShareDataBus
    {
        public static NServiceBus_6.DataBus.DataBusExtensions<NServiceBus_6.FileShareDataBus> BasePath(this NServiceBus_6.DataBus.DataBusExtensions<NServiceBus_6.FileShareDataBus> config, string basePath) { }
        [System.ObsoleteAttribute("Use `BasePath(this DataBusExtensions<FileShareDataBus> config, string basePath)` " +
            "instead. The member currently throws a NotImplementedException. Will be removed " +
            "in version 7.0.0.", true)]
        public static NServiceBus_6.DataBus.DataBusExtentions<NServiceBus_6.FileShareDataBus> BasePath(this NServiceBus_6.DataBus.DataBusExtentions<NServiceBus_6.FileShareDataBus> config, string basePath) { }
    }
    public class static ConfigureForwarding
    {
        public static void ForwardReceivedMessagesTo(this NServiceBus_6.EndpointConfiguration config, string address) { }
    }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public class static ConfigureInMemoryFaultManagement
    {
        [System.ObsoleteAttribute("This is no longer supported. If you want full control over what happens when a me" +
            "ssage fails (including retries) override the MoveFaultsToErrorQueue behavior. Th" +
            "e member currently throws a NotImplementedException. Will be removed in version " +
            "7.0.0.", true)]
        public static void DiscardFailedMessagesInsteadOfSendingToErrorQueue(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class static ConfigureLicenseExtensions
    {
        public static void License(this NServiceBus_6.EndpointConfiguration config, string licenseText) { }
        public static void LicensePath(this NServiceBus_6.EndpointConfiguration config, string licenseFile) { }
    }
    public class static ConfigurePurging
    {
        public static void PurgeOnStartup(this NServiceBus_6.EndpointConfiguration config, bool value) { }
        [System.ObsoleteAttribute("The member currently throws a NotImplementedException. Will be removed in version" +
            " 7.0.0.", true)]
        public static bool PurgeOnStartup(this NServiceBus_6.Configure config) { }
    }
    public class static ConfigureQueueCreation
    {
        [System.ObsoleteAttribute("Use `CreateQueues` instead. The member currently throws a NotImplementedException" +
            ". Will be removed in version 7.0.0.", true)]
        public static bool CreateQueues(this NServiceBus_6.Configure config) { }
        public static bool CreateQueues(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static void DoNotCreateQueues(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class static ConfigureRijndaelEncryptionService
    {
        [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. Use `NServiceBus_6.Encryption.MessageProperty.EncryptionConfigurationExtensions.EnableMessagePropertyEncryption` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public static void RegisterEncryptionService(this NServiceBus_6.EndpointConfiguration config, System.Func<NServiceBus_6.IEncryptionService> func) { }
        [System.ObsoleteAttribute(@"It is no longer possible to access the builder to create an encryption service. If container access is required use the container directly in the factory. Use `RegisterEncryptionService(this EndpointConfiguration config, Func<IEncryptionService> func)` instead. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void RegisterEncryptionService(this NServiceBus_6.EndpointConfiguration config, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, NServiceBus_6.IEncryptionService> func) { }
        [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. Use `NServiceBus_6.Encryption.MessageProperty.EncryptionConfigurationExtensions.EnableMessagePropertyEncryption` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public static void RijndaelEncryptionService(this NServiceBus_6.EndpointConfiguration config) { }
        [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. Use `NServiceBus_6.Encryption.MessageProperty.EncryptionConfigurationExtensions.EnableMessagePropertyEncryption` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public static void RijndaelEncryptionService(this NServiceBus_6.EndpointConfiguration config, string encryptionKeyIdentifier, byte[] encryptionKey, System.Collections.Generic.IList<byte[]> decryptionKeys = null) { }
        [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. Use `NServiceBus_6.Encryption.MessageProperty.EncryptionConfigurationExtensions.EnableMessagePropertyEncryption` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public static void RijndaelEncryptionService(this NServiceBus_6.EndpointConfiguration config, string encryptionKeyIdentifier, System.Collections.Generic.IDictionary<string, byte[]> keys, System.Collections.Generic.IList<byte[]> decryptionKeys = null) { }
    }
    public class static ConfigureTransportConnectionString
    {
        [System.ObsoleteAttribute("Not available any more. The member currently throws a NotImplementedException. Wi" +
            "ll be removed in version 7.0.0.", true)]
        public static string TransportConnectionString(this NServiceBus_6.Configure config) { }
    }
    public class static ConnectorContextExtensions
    {
        public static NServiceBus_6.Pipeline.IAuditContext CreateAuditContext(this NServiceBus_6.Pipeline.ForkConnector<NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, NServiceBus_6.Pipeline.IAuditContext> forkConnector, NServiceBus_6.Transport.OutgoingMessage message, string auditAddress, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IBatchDispatchContext CreateBatchDispatchContext(this NServiceBus_6.Pipeline.StageForkConnector<NServiceBus_6.Pipeline.ITransportReceiveContext, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, NServiceBus_6.Pipeline.IBatchDispatchContext> stageForkConnector, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Transport.TransportOperation> transportOperations, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IDispatchContext CreateDispatchContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IBatchDispatchContext, NServiceBus_6.Pipeline.IDispatchContext> stageConnector, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Transport.TransportOperation> transportOperations, NServiceBus_6.Pipeline.IBatchDispatchContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IDispatchContext CreateDispatchContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IRoutingContext, NServiceBus_6.Pipeline.IDispatchContext> stageConnector, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Transport.TransportOperation> transportOperations, NServiceBus_6.Pipeline.IRoutingContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IForwardingContext CreateForwardingContext(this NServiceBus_6.Pipeline.ForkConnector<NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, NServiceBus_6.Pipeline.IForwardingContext> forwardingContext, NServiceBus_6.Transport.OutgoingMessage message, string forwardingAddress, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IIncomingLogicalMessageContext CreateIncomingLogicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, NServiceBus_6.Pipeline.IIncomingLogicalMessageContext> stageConnector, NServiceBus_6.Pipeline.LogicalMessage logicalMessage, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext CreateIncomingPhysicalMessageContext(this NServiceBus_6.Pipeline.StageForkConnector<NServiceBus_6.Pipeline.ITransportReceiveContext, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, NServiceBus_6.Pipeline.IBatchDispatchContext> stageForkConnector, NServiceBus_6.Transport.IncomingMessage incomingMessage, NServiceBus_6.Pipeline.ITransportReceiveContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext CreateIncomingPhysicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.ITransportReceiveContext, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext> stageConnector, NServiceBus_6.Transport.IncomingMessage incomingMessage, NServiceBus_6.Pipeline.ITransportReceiveContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IInvokeHandlerContext CreateInvokeHandlerContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IIncomingLogicalMessageContext, NServiceBus_6.Pipeline.IInvokeHandlerContext> stageConnector, NServiceBus_6.Pipeline.MessageHandler messageHandler, NServiceBus_6.Persistence.CompletableSynchronizedStorageSession storageSession, NServiceBus_6.Pipeline.IIncomingLogicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext CreateOutgoingLogicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IOutgoingPublishContext, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext> stageConnector, NServiceBus_6.Pipeline.OutgoingLogicalMessage outgoingMessage, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> routingStrategies, NServiceBus_6.Pipeline.IOutgoingPublishContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext CreateOutgoingLogicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IOutgoingReplyContext, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext> stageConnector, NServiceBus_6.Pipeline.OutgoingLogicalMessage outgoingMessage, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> routingStrategies, NServiceBus_6.Pipeline.IOutgoingReplyContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext CreateOutgoingLogicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IOutgoingSendContext, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext> stageConnector, NServiceBus_6.Pipeline.OutgoingLogicalMessage outgoingMessage, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> routingStrategies, NServiceBus_6.Pipeline.IOutgoingSendContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext CreateOutgoingPhysicalMessageContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext, NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext> stageConnector, byte[] messageBody, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> routingStrategies, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IRoutingContext CreateRoutingContext(this NServiceBus_6.Pipeline.ForkConnector<NServiceBus_6.Pipeline.ITransportReceiveContext, NServiceBus_6.Pipeline.IRoutingContext> forkConnector, NServiceBus_6.Transport.OutgoingMessage outgoingMessage, string localAddress, NServiceBus_6.Pipeline.ITransportReceiveContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IRoutingContext CreateRoutingContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IForwardingContext, NServiceBus_6.Pipeline.IRoutingContext> stageConnector, NServiceBus_6.Transport.OutgoingMessage outgoingMessage, NServiceBus_6.Routing.RoutingStrategy routingStrategy, NServiceBus_6.Pipeline.IForwardingContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IRoutingContext CreateRoutingContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IAuditContext, NServiceBus_6.Pipeline.IRoutingContext> stageConnector, NServiceBus_6.Transport.OutgoingMessage outgoingMessage, NServiceBus_6.Routing.RoutingStrategy routingStrategy, NServiceBus_6.Pipeline.IAuditContext sourceContext) { }
        public static NServiceBus_6.Pipeline.IRoutingContext CreateRoutingContext(this NServiceBus_6.Pipeline.StageConnector<NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext, NServiceBus_6.Pipeline.IRoutingContext> stageConnector, NServiceBus_6.Transport.OutgoingMessage outgoingMessage, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> routingStrategies, NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext sourceContext) { }
    }
    public abstract class ContainSagaData : NServiceBus_6.IContainSagaData
    {
        protected ContainSagaData() { }
        public virtual System.Guid Id { get; set; }
        public virtual string OriginalMessageId { get; set; }
        public virtual string Originator { get; set; }
    }
    public class static ContentTypes
    {
        public const string Json = "application/json";
        public const string Xml = "text/xml";
    }
    public class Conventions
    {
        public Conventions() { }
        public void AddSystemMessagesConventions(System.Func<System.Type, bool> definesMessageType) { }
        [System.ObsoleteAttribute("No longer an extension point. The member currently throws a NotImplementedExcepti" +
            "on. Will be removed in version 7.0.0.", true)]
        public System.TimeSpan GetTimeToBeReceived(System.Type messageType) { }
        public bool IsCommandType(System.Type t) { }
        public bool IsDataBusProperty(System.Reflection.PropertyInfo property) { }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public bool IsEncryptedProperty(System.Reflection.PropertyInfo property) { }
        public bool IsEventType(System.Type t) { }
        [System.ObsoleteAttribute("No longer an extension point. The member currently throws a NotImplementedExcepti" +
            "on. Will be removed in version 7.0.0.", true)]
        public static bool IsExpressMessageType(System.Type t) { }
        public bool IsInSystemConventionList(System.Type t) { }
        public bool IsMessageType(System.Type t) { }
    }
    public class ConventionsBuilder : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public ConventionsBuilder(NServiceBus_6.Settings.SettingsHolder settings) { }
        public NServiceBus_6.Conventions Conventions { get; }
        public NServiceBus_6.ConventionsBuilder DefiningCommandsAs(System.Func<System.Type, bool> definesCommandType) { }
        public NServiceBus_6.ConventionsBuilder DefiningDataBusPropertiesAs(System.Func<System.Reflection.PropertyInfo, bool> definesDataBusProperty) { }
        [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. This convention configuration does not work in combination with the NServiceBus_6.Encryption.MessageProperty package. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public NServiceBus_6.ConventionsBuilder DefiningEncryptedPropertiesAs(System.Func<System.Reflection.PropertyInfo, bool> definesEncryptedProperty) { }
        public NServiceBus_6.ConventionsBuilder DefiningEventsAs(System.Func<System.Type, bool> definesEventType) { }
        public NServiceBus_6.ConventionsBuilder DefiningMessagesAs(System.Func<System.Type, bool> definesMessageType) { }
    }
    public class static CorrelationContextExtensions
    {
        [System.ObsoleteAttribute("Using custom correlation IDs is discouraged and will be removed in the next major" +
            " version. Will be treated as an error from version 7.0.0. Will be removed in ver" +
            "sion 8.0.0.", false)]
        public static string GetCorrelationId(this NServiceBus_6.SendOptions options) { }
        [System.ObsoleteAttribute("Using custom correlation IDs is discouraged and will be removed in the next major" +
            " version. Will be treated as an error from version 7.0.0. Will be removed in ver" +
            "sion 8.0.0.", false)]
        public static string GetCorrelationId(this NServiceBus_6.ReplyOptions options) { }
        [System.ObsoleteAttribute("Setting a custom correlation ID is discouraged and will be removed in the next ma" +
            "jor version. Will be treated as an error from version 7.0.0. Will be removed in " +
            "version 8.0.0.", false)]
        public static void SetCorrelationId(this NServiceBus_6.SendOptions options, string correlationId) { }
        [System.ObsoleteAttribute("Setting a custom correlation ID is discouraged and will be removed in the next ma" +
            "jor version. Will be treated as an error from version 7.0.0. Will be removed in " +
            "version 8.0.0.", false)]
        public static void SetCorrelationId(this NServiceBus_6.ReplyOptions options, string correlationId) { }
    }
    public class CriticalError
    {
        public CriticalError(System.Func<NServiceBus_6.ICriticalErrorContext, System.Threading.Tasks.Task> onCriticalErrorAction) { }
        public virtual void Raise(string errorMessage, System.Exception exception) { }
    }
    public class CriticalErrorContext : NServiceBus_6.ICriticalErrorContext
    {
        public CriticalErrorContext(System.Func<System.Threading.Tasks.Task> stop, string error, System.Exception exception) { }
        public string Error { get; }
        public System.Exception Exception { get; }
        public System.Func<System.Threading.Tasks.Task> Stop { get; }
    }
    public class static CriticalTimeMonitoringConfig
    {
        [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
            "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 8.0.0.", false)]
        public static void EnableCriticalTimePerformanceCounter(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class DataBusProperty<T> : NServiceBus_6.IDataBusProperty, System.Runtime.Serialization.ISerializable
        where T :  class
    {
        public DataBusProperty(T value) { }
        protected DataBusProperty(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public bool HasValue { get; set; }
        public string Key { get; set; }
        public T Value { get; }
        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public object GetValue() { }
        public void SetValue(object valueToSet) { }
    }
    public class static DateTimeExtensions
    {
        public static System.DateTime ToUtcDateTime(string wireFormattedString) { }
        public static string ToWireFormattedString(System.DateTime dateTime) { }
    }
    public class static DefaultRecoverabilityPolicy
    {
        public static NServiceBus_6.RecoverabilityAction Invoke(NServiceBus_6.RecoverabilityConfig config, NServiceBus_6.Transport.ErrorContext errorContext) { }
    }
    public class DelayedConfig
    {
        public DelayedConfig(int maxNumberOfRetries, System.TimeSpan timeIncrease) { }
        public int MaxNumberOfRetries { get; }
        public System.TimeSpan TimeIncrease { get; }
    }
    public class static DelayedDeliveryOptionExtensions
    {
        public static void DelayDeliveryWith(this NServiceBus_6.SendOptions options, System.TimeSpan delay) { }
        public static void DoNotDeliverBefore(this NServiceBus_6.SendOptions options, System.DateTimeOffset at) { }
        public static System.Nullable<System.DateTimeOffset> GetDeliveryDate(this NServiceBus_6.SendOptions options) { }
        public static System.Nullable<System.TimeSpan> GetDeliveryDelay(this NServiceBus_6.SendOptions options) { }
    }
    public class DelayedRetriesSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public NServiceBus_6.DelayedRetriesSettings NumberOfRetries(int numberOfRetries) { }
        public NServiceBus_6.DelayedRetriesSettings TimeIncrease(System.TimeSpan timeIncrease) { }
    }
    public sealed class DelayedRetry : NServiceBus_6.RecoverabilityAction
    {
        public System.TimeSpan Delay { get; }
    }
    public enum DependencyLifecycle
    {
        SingleInstance = 0,
        InstancePerUnitOfWork = 1,
        InstancePerCall = 2,
    }
    public class DistributionPolicy : NServiceBus_6.IDistributionPolicy
    {
        public DistributionPolicy() { }
        public void SetDistributionStrategy(NServiceBus_6.Routing.DistributionStrategy distributionStrategy) { }
    }
    public enum DistributionStrategyScope
    {
        Send = 0,
        Publish = 1,
    }
    public class static DurableMessagesConfig
    {
        public static void DisableDurableMessages(this NServiceBus_6.EndpointConfiguration config) { }
        public static bool DurableMessagesEnabled(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        [System.ObsoleteAttribute("Use `DurableMessagesEnabled` instead. The member currently throws a NotImplemente" +
            "dException. Will be removed in version 7.0.0.", true)]
        public static bool DurableMessagesEnabled(this NServiceBus_6.Configure config) { }
        public static void EnableDurableMessages(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class static DurableMessagesConventionExtensions
    {
        public static NServiceBus_6.ConventionsBuilder DefiningExpressMessagesAs(this NServiceBus_6.ConventionsBuilder builder, System.Func<System.Type, bool> definesExpressMessageType) { }
    }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public class EncryptedValue
    {
        public EncryptedValue() { }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public string Base64Iv { get; set; }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public string EncryptedBase64Value { get; set; }
    }
    public class static Endpoint
    {
        public static System.Threading.Tasks.Task<NServiceBus_6.IStartableEndpoint> Create(NServiceBus_6.EndpointConfiguration configuration) { }
        public static System.Threading.Tasks.Task<NServiceBus_6.IEndpointInstance> Start(NServiceBus_6.EndpointConfiguration configuration) { }
    }
    public class EndpointConfiguration : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public EndpointConfiguration(string endpointName) { }
        public NServiceBus_6.Notifications Notifications { get; }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.AddHeaderToAllOutgoingMessages(string key,string value" +
            ")` instead. The member currently throws a NotImplementedException. Will be remov" +
            "ed in version 7.0.0.", true)]
        public System.Collections.Generic.IDictionary<string, string> OutgoingHeaders { get; }
        public NServiceBus_6.Pipeline.PipelineSettings Pipeline { get; }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.ExcludeAssemblies` instead. The member currently throw" +
            "s a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void AssembliesToScan(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.ExcludeAssemblies` instead. The member currently throw" +
            "s a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void AssembliesToScan(params System.Reflection.Assembly[] assemblies) { }
        public NServiceBus_6.ConventionsBuilder Conventions() { }
        public void CustomConfigurationSource(NServiceBus_6.Config.ConfigurationSource.IConfigurationSource configurationSource) { }
        [System.ObsoleteAttribute("Endpoint name is now a mandatory constructor argument on EndpointConfiguration. T" +
            "he member currently throws a NotImplementedException. Will be removed in version" +
            " 7.0.0.", true)]
        public void EndpointName(string name) { }
        [System.ObsoleteAttribute("Use the AssemblyScanner configuration API. Use `AssemblyScannerConfigurationExten" +
            "sions.AssemblyScanner` instead. Will be treated as an error from version 7.0.0. " +
            "Will be removed in version 8.0.0.", false)]
        public void ExcludeAssemblies(params string[] assemblies) { }
        [System.ObsoleteAttribute("Use the AssemblyScanner configuration API. Use `AssemblyScannerConfigurationExten" +
            "sions.AssemblyScanner` instead. Will be treated as an error from version 7.0.0. " +
            "Will be removed in version 8.0.0.", false)]
        public void ExcludeTypes(params System.Type[] types) { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.OverridePublicReturnAddress(string address)` instead. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 7.0.0.", true)]
        public void OverridePublicReturnAddress(NServiceBus_6.Address address) { }
        public void RegisterComponents(System.Action<NServiceBus_6.ObjectBuilder.IConfigureComponents> registration) { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.ExcludeAssemblies` instead. The member currently throw" +
            "s a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void ScanAssembliesInDirectory(string probeDirectory) { }
        [System.ObsoleteAttribute("Use the AssemblyScanner configuration API. Use `AssemblyScannerConfigurationExten" +
            "sions.AssemblyScanner` instead. Will be treated as an error from version 7.0.0. " +
            "Will be removed in version 8.0.0.", false)]
        public void ScanAssembliesInNestedDirectories() { }
        public void SendOnly() { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.ExcludeTypes` instead. The member currently throws a N" +
            "otImplementedException. Will be removed in version 7.0.0.", true)]
        public void TypesToScan(System.Collections.Generic.IEnumerable<System.Type> typesToScan) { }
        public void UseContainer<T>(System.Action<NServiceBus_6.Container.ContainerCustomizations> customizations = null)
            where T : NServiceBus_6.Container.ContainerDefinition, new () { }
        public void UseContainer(System.Type definitionType) { }
        public void UseContainer(NServiceBus_6.ObjectBuilder.Common.IContainer builder) { }
    }
    public class static EndpointConfigurationExtensions
    {
        public static void DisableFeature<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Features.Feature { }
        public static void DisableFeature(this NServiceBus_6.EndpointConfiguration config, System.Type featureType) { }
        public static void EnableFeature<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Features.Feature { }
        public static void EnableFeature(this NServiceBus_6.EndpointConfiguration config, System.Type featureType) { }
    }
    public class static EndpointInstanceExtensions
    {
        public static NServiceBus_6.Routing.EndpointInstance AtMachine(this NServiceBus_6.Routing.EndpointInstance instance, string machineName) { }
    }
    public class static ErrorQueueSettings
    {
        public const string SettingsKey = "errorQueue";
        public static string ErrorQueueAddress(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static bool TryGetExplicitlyConfiguredErrorQueueAddress(this NServiceBus_6.Settings.ReadOnlySettings settings, out string errorQueue) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.All)]
    public sealed class ExpressAttribute : System.Attribute
    {
        public ExpressAttribute() { }
    }
    [System.ObsoleteAttribute("Headers are not managed via the send, reply and publishoptions. Will be removed i" +
        "n version 7.0.0.", true)]
    public class static ExtensionMethods
    {
        [System.ObsoleteAttribute("Use a incoming behavior to get access to the current message. The member currentl" +
            "y throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static object CurrentMessageBeingHandled { get; set; }
        [System.ObsoleteAttribute("Headers are not \'set\' only on the outgoing pipeline. The member currently throws " +
            "a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static string GetMessageHeader(this NServiceBus_6.IBus bus, object msg, string key) { }
        [System.ObsoleteAttribute("Use the overload of the Send, Publish or Reply method that accepts an options par" +
            "ameter. Call options.SetHeader(\"MyHeader\",\"MyValue\") instead. The member current" +
            "ly throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void SetMessageHeader(this NServiceBus_6.IBus bus, object msg, string key, string value) { }
    }
    public class FailedConfig
    {
        [System.ObsoleteAttribute("Use `FailedConfig(string errorQueue, HashSet<Type> unrecoverableExceptionTypes)` " +
            "instead. Will be treated as an error from version 7.0.0. Will be removed in vers" +
            "ion 8.0.0.", false)]
        public FailedConfig(string errorQueue) { }
        public FailedConfig(string errorQueue, System.Collections.Generic.HashSet<System.Type> unrecoverableExceptionTypes) { }
        public string ErrorQueue { get; }
        public System.Collections.Generic.HashSet<System.Type> UnrecoverableExceptionTypes { get; }
    }
    public class FileShareDataBus : NServiceBus_6.DataBus.DataBusDefinition
    {
        public FileShareDataBus() { }
        protected internal override System.Type ProvidedByFeature() { }
    }
    [System.ObsoleteAttribute("Use `EndpointConfiguration.ExecuteTheseHandlersFirst` instead. Will be removed in" +
        " version 7.0.0.", true)]
    public class First<T>
    {
        public First() { }
    }
    public class static HeaderOptionExtensions
    {
        public static System.Collections.Generic.IReadOnlyDictionary<string, string> GetHeaders(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
        public static void SetHeader(this NServiceBus_6.Extensibility.ExtendableOptions options, string key, string value) { }
    }
    public class static Headers
    {
        public const string ContentType = "NServiceBus.ContentType";
        public const string ControlMessageHeader = "NServiceBus.ControlMessage";
        public const string ConversationId = "NServiceBus.ConversationId";
        public const string CorrelationId = "NServiceBus.CorrelationId";
        public const string DelayedRetries = "NServiceBus.Retries";
        public const string DelayedRetriesTimestamp = "NServiceBus.Retries.Timestamp";
        public const string DestinationSites = "NServiceBus.DestinationSites";
        public const string EnclosedMessageTypes = "NServiceBus.EnclosedMessageTypes";
        [System.ObsoleteAttribute("Use `ImmediateRetries` instead. Will be removed in version 7.0.0.", true)]
        public const string FLRetries = "NServiceBus.FLRetries";
        public const string HasLicenseExpired = "$.diagnostics.license.expired";
        public const string HeaderName = "Header";
        public const string HostDisplayName = "$.diagnostics.hostdisplayname";
        public const string HostId = "$.diagnostics.hostid";
        public const string HttpFrom = "NServiceBus.From";
        public const string HttpTo = "NServiceBus.To";
        public const string ImmediateRetries = "NServiceBus.FLRetries";
        public const string IsDeferredMessage = "NServiceBus.IsDeferredMessage";
        public const string IsSagaTimeoutMessage = "NServiceBus.IsSagaTimeoutMessage";
        public const string MessageId = "NServiceBus.MessageId";
        public const string MessageIntent = "NServiceBus.MessageIntent";
        public const string NonDurableMessage = "NServiceBus.NonDurableMessage";
        public const string NServiceBusVersion = "NServiceBus.Version";
        public const string OriginatingAddress = "NServiceBus.OriginatingAddress";
        public const string OriginatingEndpoint = "NServiceBus.OriginatingEndpoint";
        public const string OriginatingHostId = "$.diagnostics.originating.hostid";
        public const string OriginatingMachine = "NServiceBus.OriginatingMachine";
        public const string OriginatingSagaId = "NServiceBus.OriginatingSagaId";
        public const string OriginatingSagaType = "NServiceBus.OriginatingSagaType";
        public const string OriginatingSite = "NServiceBus.OriginatingSite";
        public const string ProcessingEnded = "NServiceBus.ProcessingEnded";
        public const string ProcessingEndpoint = "NServiceBus.ProcessingEndpoint";
        public const string ProcessingMachine = "NServiceBus.ProcessingMachine";
        public const string ProcessingStarted = "NServiceBus.ProcessingStarted";
        public const string RelatedTo = "NServiceBus.RelatedTo";
        public const string ReplyToAddress = "NServiceBus.ReplyToAddress";
        [System.ObsoleteAttribute("Use `DelayedRetries` instead. Will be removed in version 7.0.0.", true)]
        public const string Retries = "NServiceBus.Retries";
        [System.ObsoleteAttribute("Use `DelayedRetriesTimestamp` instead. Will be removed in version 7.0.0.", true)]
        public const string RetriesTimestamp = "NServiceBus.Retries.Timestamp";
        public const string ReturnMessageErrorCodeHeader = "NServiceBus.ReturnMessage.ErrorCode";
        public const string RijndaelKeyIdentifier = "NServiceBus.RijndaelKeyIdentifier";
        public const string RouteTo = "NServiceBus.Header.RouteTo";
        public const string SagaId = "NServiceBus.SagaId";
        public const string SagaType = "NServiceBus.SagaType";
        public const string SubscriberEndpoint = "NServiceBus.SubscriberEndpoint";
        public const string SubscriberTransportAddress = "NServiceBus.SubscriberAddress";
        public const string SubscriptionMessageType = "SubscriptionMessageType";
        public const string TimeSent = "NServiceBus.TimeSent";
        public const string TimeToBeReceived = "NServiceBus.TimeToBeReceived";
        [System.ObsoleteAttribute("The WinIdName header is no longer attached to outgoing message to avoid passing s" +
            "ecurity related information on the wire. Should you rely on the header being pre" +
            "sent you can add a message mutator that sets it. Will be removed in version 7.0." +
            "0.", true)]
        public const string WindowsIdentityName = "WinIdName";
    }
    public class static HostInfoConfigurationExtensions
    {
        public static NServiceBus_6.HostInfoSettings UniquelyIdentifyRunningInstance(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class HostInfoSettings
    {
        public NServiceBus_6.HostInfoSettings UsingCustomDisplayName(string displayName) { }
        public NServiceBus_6.HostInfoSettings UsingCustomIdentifier(System.Guid id) { }
        public NServiceBus_6.HostInfoSettings UsingInstalledFilePath() { }
        public NServiceBus_6.HostInfoSettings UsingNames(string instanceName, string hostName) { }
    }
    public interface IAmStartedByMessages<T> : NServiceBus_6.IHandleMessages<T> { }
    [System.ObsoleteAttribute("Use `config.UseTransport<MsmqTransport>().SubscriptionAuthorizer(Authorizer);` in" +
        "stead. Will be removed in version 7.0.0.", true)]
    public interface IAuthorizeSubscriptions { }
    [System.ObsoleteAttribute(@"IHandleMessages<T> now exposes the IMessageHandlerContext parameter. Use this to access what used to be available in the IBus interface. Use the provided context in extension points like message handlers or IEndpointInstance when outside the message processing pipeline. Will be removed in version 7.0.0.", true)]
    public interface IBus { }
    public class static IBusExtensions
    {
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.DoNotContinueDispatchingCurrentMessageToHandlers()` p" +
            "rovided to message handlers instead. The member currently throws a NotImplemente" +
            "dException. Will be removed in version 7.0.0.", true)]
        public static void DoNotContinueDispatchingCurrentMessageToHandlers(this NServiceBus_6.IBus bus) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.ForwardCurrentMessageTo(string destination)` provided" +
            " to message handlers instead. The member currently throws a NotImplementedExcept" +
            "ion. Will be removed in version 7.0.0.", true)]
        public static void ForwardCurrentMessageTo(this NServiceBus_6.IBus bus, string destination) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.HandleCurrentMessageLater()` provided to message hand" +
            "lers instead. The member currently throws a NotImplementedException. Will be rem" +
            "oved in version 7.0.0.", true)]
        public static void HandleCurrentMessageLater(this NServiceBus_6.IBus bus) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.Reply(object message)` provided to message handlers i" +
            "nstead. The member currently throws a NotImplementedException. Will be removed i" +
            "n version 7.0.0.", true)]
        public static void Reply(this NServiceBus_6.IBus bus, object message) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.Reply<T>(Action<T> messageConstructor)` provided to m" +
            "essage handlers instead. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        public static void Reply<T>(this NServiceBus_6.IBus bus, System.Action<T> messageConstructor) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.SendLocal(object message)` provided to message handle" +
            "rs instead. The member currently throws a NotImplementedException. Will be remov" +
            "ed in version 7.0.0.", true)]
        public static void SendLocal(this NServiceBus_6.IBus bus, object message) { }
        [System.ObsoleteAttribute("Use `IMessageHandlerContext.SendLocal<T>(Action<T> messageConstructor)` provided " +
            "to message handlers instead. The member currently throws a NotImplementedExcepti" +
            "on. Will be removed in version 7.0.0.", true)]
        public static void SendLocal<T>(this NServiceBus_6.IBus bus, System.Action<T> messageConstructor) { }
        [System.ObsoleteAttribute("Use `Subscribe(Type messageType)` instead. The member currently throws a NotImple" +
            "mentedException. Will be removed in version 7.0.0.", true)]
        public static void Subscribe(this NServiceBus_6.IBus bus, System.Type messageType) { }
        [System.ObsoleteAttribute("Use `Subscribe<T>()` instead. The member currently throws a NotImplementedExcepti" +
            "on. Will be removed in version 7.0.0.", true)]
        public static void Subscribe<T>(this NServiceBus_6.IBus bus) { }
        [System.ObsoleteAttribute("Use `Unsubscribe(Type messageType)` instead. The member currently throws a NotImp" +
            "lementedException. Will be removed in version 7.0.0.", true)]
        public static void Unsubscribe(this NServiceBus_6.IBus bus, System.Type messageType) { }
        [System.ObsoleteAttribute("Use `Unsubscribe<T>()` instead. The member currently throws a NotImplementedExcep" +
            "tion. Will be removed in version 7.0.0.", true)]
        public static void Unsubscribe<T>(this NServiceBus_6.IBus bus) { }
    }
    [System.ObsoleteAttribute("Replaced by NServiceBus_6.Callbacks package. Will be removed in version 7.0.0.", true)]
    public interface ICallback { }
    public interface ICommand : NServiceBus_6.IMessage { }
    public interface IConfigureHowToFindSagaWithMessage
    {
        void ConfigureMapping<TSagaEntity, TMessage>(System.Linq.Expressions.Expression<System.Func<TSagaEntity, object>> sagaEntityProperty, System.Linq.Expressions.Expression<System.Func<TMessage, object>> messageProperty)
            where TSagaEntity : NServiceBus_6.IContainSagaData
        ;
    }
    public interface IContainSagaData
    {
        System.Guid Id { get; set; }
        string OriginalMessageId { get; set; }
        string Originator { get; set; }
    }
    public interface ICriticalErrorContext
    {
        string Error { get; }
        System.Exception Exception { get; }
        System.Func<System.Threading.Tasks.Task> Stop { get; }
    }
    public interface IDataBusProperty
    {
        bool HasValue { get; set; }
        string Key { get; set; }
        object GetValue();
        void SetValue(object value);
    }
    public interface IDistributionPolicy
    {
        NServiceBus_6.Routing.DistributionStrategy GetDistributionStrategy(string endpointName, NServiceBus_6.DistributionStrategyScope scope);
    }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public interface IEncryptionService
    {
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        string Decrypt(NServiceBus_6.EncryptedValue encryptedValue, NServiceBus_6.Pipeline.IIncomingLogicalMessageContext context);
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        NServiceBus_6.EncryptedValue Encrypt(string value, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext context);
    }
    public interface IEndpointInstance : NServiceBus_6.IMessageSession
    {
        System.Threading.Tasks.Task Stop();
    }
    public interface IEvent : NServiceBus_6.IMessage { }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public interface IExcludesBuilder { }
    public interface IHandleMessages<T>
    {
        System.Threading.Tasks.Task Handle(T message, NServiceBus_6.IMessageHandlerContext context);
    }
    public interface IHandleTimeouts<T>
    {
        System.Threading.Tasks.Task Timeout(T state, NServiceBus_6.IMessageHandlerContext context);
    }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public interface IIncludesBuilder { }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public interface IManageMessageHeaders { }
    public interface IMessage { }
    [System.ObsoleteAttribute("Use `IMessageHandlerContext` provided to message handlers instead. Will be remove" +
        "d in version 7.0.0.", true)]
    public interface IMessageContext { }
    public interface IMessageCreator
    {
        T CreateInstance<T>();
        T CreateInstance<T>(System.Action<T> action);
        object CreateInstance(System.Type messageType);
    }
    public interface IMessageHandlerContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext
    {
        NServiceBus_6.Persistence.SynchronizedStorageSession SynchronizedStorageSession { get; }
        void DoNotContinueDispatchingCurrentMessageToHandlers();
        System.Threading.Tasks.Task HandleCurrentMessageLater();
    }
    public interface IMessageProcessingContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext
    {
        System.Collections.Generic.IReadOnlyDictionary<string, string> MessageHeaders { get; }
        string MessageId { get; }
        string ReplyToAddress { get; }
        System.Threading.Tasks.Task ForwardCurrentMessageTo(string destination);
        System.Threading.Tasks.Task Reply(object message, NServiceBus_6.ReplyOptions options);
        System.Threading.Tasks.Task Reply<T>(System.Action<T> messageConstructor, NServiceBus_6.ReplyOptions options);
    }
    public class static IMessageProcessingContextExtensions
    {
        public static System.Threading.Tasks.Task Reply(this NServiceBus_6.IMessageProcessingContext context, object message) { }
        public static System.Threading.Tasks.Task Reply<T>(this NServiceBus_6.IMessageProcessingContext context, System.Action<T> messageConstructor) { }
    }
    public interface IMessageSession
    {
        System.Threading.Tasks.Task Publish(object message, NServiceBus_6.PublishOptions options);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus_6.PublishOptions publishOptions);
        System.Threading.Tasks.Task Send(object message, NServiceBus_6.SendOptions options);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus_6.SendOptions options);
        System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus_6.SubscribeOptions options);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus_6.UnsubscribeOptions options);
    }
    public class static IMessageSessionExtensions
    {
        public static System.Threading.Tasks.Task Publish(this NServiceBus_6.IMessageSession session, object message) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus_6.IMessageSession session) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus_6.IMessageSession session, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus_6.IMessageSession session, object message) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus_6.IMessageSession session, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus_6.IMessageSession session, string destination, object message) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus_6.IMessageSession session, string destination, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task SendLocal(this NServiceBus_6.IMessageSession session, object message) { }
        public static System.Threading.Tasks.Task SendLocal<T>(this NServiceBus_6.IMessageSession session, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task Subscribe(this NServiceBus_6.IMessageSession session, System.Type messageType) { }
        public static System.Threading.Tasks.Task Subscribe<T>(this NServiceBus_6.IMessageSession session) { }
        public static System.Threading.Tasks.Task Unsubscribe(this NServiceBus_6.IMessageSession session, System.Type messageType) { }
        public static System.Threading.Tasks.Task Unsubscribe<T>(this NServiceBus_6.IMessageSession session) { }
    }
    public class ImmediateConfig
    {
        public ImmediateConfig(int maxNumberOfRetries) { }
        public int MaxNumberOfRetries { get; }
    }
    public class static ImmediateDispatchOptionExtensions
    {
        public static bool RequiredImmediateDispatch(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
        public static void RequireImmediateDispatch(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
    }
    public class ImmediateRetriesSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public void NumberOfRetries(int numberOfRetries) { }
    }
    public sealed class ImmediateRetry : NServiceBus_6.RecoverabilityAction { }
    public interface INeedInitialization
    {
        void Customize(NServiceBus_6.EndpointConfiguration configuration);
    }
    public class InMemoryPersistence : NServiceBus_6.Persistence.PersistenceDefinition { }
    public class static InstallConfigExtensions
    {
        public static void DisableInstallers(this NServiceBus_6.EndpointConfiguration config) { }
        public static void EnableInstallers(this NServiceBus_6.EndpointConfiguration config, string username = null) { }
    }
    public class InstanceMappingFileSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public InstanceMappingFileSettings(NServiceBus_6.Settings.SettingsHolder settings) { }
        public NServiceBus_6.InstanceMappingFileSettings FilePath(string filePath) { }
        public NServiceBus_6.InstanceMappingFileSettings RefreshInterval(System.TimeSpan refreshInterval) { }
    }
    public interface IPipelineContext : NServiceBus_6.Extensibility.IExtendable
    {
        System.Threading.Tasks.Task Publish(object message, NServiceBus_6.PublishOptions options);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus_6.PublishOptions publishOptions);
        System.Threading.Tasks.Task Send(object message, NServiceBus_6.SendOptions options);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus_6.SendOptions options);
    }
    public class static IPipelineContextExtensions
    {
        public static System.Threading.Tasks.Task Publish(this NServiceBus_6.IPipelineContext context, object message) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus_6.IPipelineContext context) { }
        public static System.Threading.Tasks.Task Publish<T>(this NServiceBus_6.IPipelineContext context, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus_6.IPipelineContext context, object message) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus_6.IPipelineContext context, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task Send(this NServiceBus_6.IPipelineContext context, string destination, object message) { }
        public static System.Threading.Tasks.Task Send<T>(this NServiceBus_6.IPipelineContext context, string destination, System.Action<T> messageConstructor) { }
        public static System.Threading.Tasks.Task SendLocal(this NServiceBus_6.IPipelineContext context, object message) { }
        public static System.Threading.Tasks.Task SendLocal<T>(this NServiceBus_6.IPipelineContext context, System.Action<T> messageConstructor) { }
    }
    [System.ObsoleteAttribute("Use IEndpointInstance to create sending session. Will be removed in version 7.0.0" +
        ".", true)]
    public interface ISendOnlyBus : System.IDisposable { }
    [System.ObsoleteAttribute("Use `EndpointConfiguration.ExecuteTheseHandlersFirst` instead. Will be removed in" +
        " version 7.0.0.", true)]
    public interface ISpecifyMessageHandlerOrdering { }
    [System.ObsoleteAttribute("Use `IStartableEndpoint` instead. Will be removed in version 7.0.0.", true)]
    public interface IStartableBus : NServiceBus_6.IBus
    {
        [System.ObsoleteAttribute("Use `IStartableEndpoint` instead. Will be removed in version 7.0.0.", true)]
        NServiceBus_6.IBus Start();
    }
    public interface IStartableEndpoint
    {
        System.Threading.Tasks.Task<NServiceBus_6.IEndpointInstance> Start();
    }
    public interface IWantToRunBeforeConfigurationIsFinalized
    {
        void Run(NServiceBus_6.Settings.SettingsHolder settings);
    }
    [System.ObsoleteAttribute(@"`IWantToRunWhenBusStartsAndStops` has been moved to the host implementations and renamed. If you're self-hosting, instead of using this interface, you can call any startup code right before `Endpoint.Create` or any cleanup code right after `Endpoint.Stop`. When using either NServiceBus_6.Host or NServiceBus_6.Host.AzureCloudService, use the host's interface `IWantToRunWhenEndpointStartsAndStops` instead. Will be removed in version 7.0.0.", true)]
    public interface IWantToRunWhenBusStartsAndStops { }
    public class JsonSerializer : NServiceBus_6.Serialization.SerializationDefinition
    {
        public JsonSerializer() { }
        public override System.Func<NServiceBus_6.MessageInterfaces.IMessageMapper, NServiceBus_6.Serialization.IMessageSerializer> Configure(NServiceBus_6.Settings.ReadOnlySettings settings) { }
    }
    public class static JsonSerializerConfigurationExtensions
    {
        public static void Encoding(this NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.JsonSerializer> config, System.Text.Encoding encoding) { }
        [System.ObsoleteAttribute("Use `Encoding(this SerializationExtensions<JsonSerializer> config, Encoding encod" +
            "ing)` instead. The member currently throws a NotImplementedException. Will be re" +
            "moved in version 7.0.0.", true)]
        public static void Encoding(this NServiceBus_6.SerializationExtentions<NServiceBus_6.JsonSerializer> config, System.Text.Encoding encoding) { }
    }
    public class LearningPersistence : NServiceBus_6.Persistence.PersistenceDefinition { }
    public class static LearningSagaPersisterConfigurationExtensions
    {
        public static void SagaStorageDirectory(this NServiceBus_6.PersistenceExtensions<NServiceBus_6.LearningPersistence> persistenceExtensions, string path) { }
    }
    public class LearningTransport : NServiceBus_6.Transport.TransportDefinition
    {
        public LearningTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        public override NServiceBus_6.Transport.TransportInfrastructure Initialize(NServiceBus_6.Settings.SettingsHolder settings, string connectionString) { }
    }
    public class static LearningTransportConfigurationExtensions
    {
        public static void NoPayloadSizeRestriction(this NServiceBus_6.TransportExtensions<NServiceBus_6.LearningTransport> transportExtensions) { }
        public static void StorageDirectory(this NServiceBus_6.TransportExtensions<NServiceBus_6.LearningTransport> transportExtensions, string path) { }
    }
    public class static LoadMessageHandlersExtensions
    {
        public static void ExecuteTheseHandlersFirst(this NServiceBus_6.EndpointConfiguration config, System.Collections.Generic.IEnumerable<System.Type> handlerTypes) { }
        public static void ExecuteTheseHandlersFirst(this NServiceBus_6.EndpointConfiguration config, params System.Type[] handlerTypes) { }
        [System.ObsoleteAttribute("Use `ExecuteTheseHandlersFirst` instead. The member currently throws a NotImpleme" +
            "ntedException. Will be removed in version 7.0.0.", true)]
        public static void LoadMessageHandlers<TFirst>(this NServiceBus_6.EndpointConfiguration config) { }
        [System.ObsoleteAttribute("Use `ExecuteTheseHandlersFirst` instead. The member currently throws a NotImpleme" +
            "ntedException. Will be removed in version 7.0.0.", true)]
        public static void LoadMessageHandlers<T>(this NServiceBus_6.EndpointConfiguration config, NServiceBus_6.First<T> order) { }
    }
    [System.ObsoleteAttribute("Use `LoadMessageHandlersExtensions` instead. Will be removed in version 7.0.0.", true)]
    public class static LoadMessageHandlersExtentions { }
    public struct LogicalAddress
    {
        public NServiceBus_6.Routing.EndpointInstance EndpointInstance { get; }
        public string Qualifier { get; }
        public NServiceBus_6.LogicalAddress CreateIndividualizedAddress(string discriminator) { }
        public static NServiceBus_6.LogicalAddress CreateLocalAddress(string queueName, System.Collections.Generic.IReadOnlyDictionary<string, string> properties) { }
        public NServiceBus_6.LogicalAddress CreateQualifiedAddress(string qualifier) { }
        public static NServiceBus_6.LogicalAddress CreateRemoteAddress(NServiceBus_6.Routing.EndpointInstance endpointInstance) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class MessageDeserializationException : System.Runtime.Serialization.SerializationException
    {
        public MessageDeserializationException(string message) { }
        public MessageDeserializationException(string transportMessageId, System.Exception innerException) { }
        protected MessageDeserializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    public class static MessageDrivenSubscriptionsConfigExtensions
    {
        public static void RegisterPublisher<T>(this NServiceBus_6.RoutingSettings<T> routingSettings, System.Type eventType, string publisherEndpoint)
            where T : NServiceBus_6.Transport.TransportDefinition, NServiceBus_6.Routing.IMessageDrivenSubscriptionTransport { }
        public static void RegisterPublisher<T>(this NServiceBus_6.RoutingSettings<T> routingSettings, System.Reflection.Assembly assembly, string publisherEndpoint)
            where T : NServiceBus_6.Transport.TransportDefinition, NServiceBus_6.Routing.IMessageDrivenSubscriptionTransport { }
        public static void RegisterPublisher<T>(this NServiceBus_6.RoutingSettings<T> routingSettings, System.Reflection.Assembly assembly, string @namespace, string publisherEndpoint)
            where T : NServiceBus_6.Transport.TransportDefinition, NServiceBus_6.Routing.IMessageDrivenSubscriptionTransport { }
        public static void SubscriptionAuthorizer<T>(this NServiceBus_6.TransportExtensions<T> transportExtensions, System.Func<NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext, bool> authorizer)
            where T : NServiceBus_6.Transport.TransportDefinition, NServiceBus_6.Routing.IMessageDrivenSubscriptionTransport { }
    }
    public class static MessageIdExtensions
    {
        public static string GetMessageId(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
        public static void SetMessageId(this NServiceBus_6.Extensibility.ExtendableOptions options, string messageId) { }
    }
    public enum MessageIntentEnum
    {
        Send = 1,
        Publish = 2,
        Subscribe = 3,
        Unsubscribe = 4,
        Reply = 5,
    }
    public class static MessageProcessingOptimizationExtensions
    {
        public static void LimitMessageProcessingConcurrencyTo(this NServiceBus_6.EndpointConfiguration config, int maxConcurrency) { }
    }
    public sealed class MoveToError : NServiceBus_6.RecoverabilityAction
    {
        public string ErrorQueue { get; }
    }
    public class static MsmqConfigurationExtensions
    {
        public static NServiceBus_6.TransportExtensions<NServiceBus_6.MsmqTransport> ApplyLabelToMessages(this NServiceBus_6.TransportExtensions<NServiceBus_6.MsmqTransport> transportExtensions, System.Func<System.Collections.Generic.IReadOnlyDictionary<string, string>, string> labelGenerator) { }
        public static NServiceBus_6.InstanceMappingFileSettings InstanceMappingFile(this NServiceBus_6.RoutingSettings<NServiceBus_6.MsmqTransport> config) { }
        public static void SetMessageDistributionStrategy(this NServiceBus_6.RoutingSettings<NServiceBus_6.MsmqTransport> config, NServiceBus_6.Routing.DistributionStrategy distributionStrategy) { }
        public static NServiceBus_6.TransportExtensions<NServiceBus_6.MsmqTransport> TransactionScopeOptions(this NServiceBus_6.TransportExtensions<NServiceBus_6.MsmqTransport> transportExtensions, System.Nullable<System.TimeSpan> timeout = null, System.Nullable<System.Transactions.IsolationLevel> isolationLevel = null) { }
        public static void UseDeadLetterQueueForMessagesWithTimeToBeReceived(this NServiceBus_6.TransportExtensions<NServiceBus_6.MsmqTransport> config) { }
    }
    public class MsmqTransport : NServiceBus_6.Transport.TransportDefinition, NServiceBus_6.Routing.IMessageDrivenSubscriptionTransport
    {
        public MsmqTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        public override NServiceBus_6.Transport.TransportInfrastructure Initialize(NServiceBus_6.Settings.SettingsHolder settings, string connectionString) { }
    }
    public class NonDurableDelivery : NServiceBus_6.DeliveryConstraints.DeliveryConstraint
    {
        public NonDurableDelivery() { }
    }
    public class Notifications
    {
        public Notifications() { }
        public NServiceBus_6.Faults.ErrorsNotifications Errors { get; }
        [System.ObsoleteAttribute("For performance reasons it is no longer possible to instrument the pipeline execu" +
            "tion. The member currently throws a NotImplementedException. Will be removed in " +
            "version 7.0.0.", true)]
        public NServiceBus_6.PipelineNotifications Pipeline { get; }
    }
    [System.ObsoleteAttribute("Use `EndpointConfiguration.ExecuteTheseHandlersFirst` instead. Will be removed in" +
        " version 7.0.0.", true)]
    public class Order
    {
        public Order() { }
    }
    public class static OutboxConfigExtensions
    {
        public static NServiceBus_6.Outbox.OutboxSettings EnableOutbox(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class PendingTransportOperations
    {
        public PendingTransportOperations() { }
        public bool HasOperations { get; }
        public NServiceBus_6.Transport.TransportOperation[] Operations { get; }
        public void Add(NServiceBus_6.Transport.TransportOperation transportOperation) { }
        public void AddRange(NServiceBus_6.Transport.TransportOperation[] transportOperations) { }
    }
    public class static PersistenceConfig
    {
        public static NServiceBus_6.PersistenceExtensions<T> UsePersistence<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Persistence.PersistenceDefinition { }
        public static NServiceBus_6.PersistenceExtensions<T, S> UsePersistence<T, S>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Persistence.PersistenceDefinition
            where S : NServiceBus_6.Persistence.StorageType { }
        public static NServiceBus_6.PersistenceExtensions UsePersistence(this NServiceBus_6.EndpointConfiguration config, System.Type definitionType) { }
    }
    public class PersistenceExtensions : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public PersistenceExtensions(System.Type definitionType, NServiceBus_6.Settings.SettingsHolder settings, System.Type storageType) { }
        [System.ObsoleteAttribute(@"Example: config.UsePersistence<InMemoryPersistence>().For(TimeoutStorage) should be changed to config.UsePersistence<InMemoryPersistence, Timeouts>(). Use `UsePersistence<T, S>() where T : PersistenceExtension where S : StorageType` instead. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.PersistenceExtensions For(params NServiceBus_6.Persistence.Storage[] specificStorages) { }
    }
    public class PersistenceExtensions<T> : NServiceBus_6.PersistenceExtensions
        where T : NServiceBus_6.Persistence.PersistenceDefinition
    {
        public PersistenceExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
        protected PersistenceExtensions(NServiceBus_6.Settings.SettingsHolder settings, System.Type storageType) { }
        [System.ObsoleteAttribute("Example: config.UsePersistence<InMemoryPersistence>().For(TimeoutStorage) should " +
            "be changed to config.UsePersistence<InMemoryPersistence, Timeouts>(). Use `UsePe" +
            "rsistence<T, S>()` instead. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.PersistenceExtensions<T> For(params NServiceBus_6.Persistence.Storage[] specificStorages) { }
    }
    public class PersistenceExtensions<T, S> : NServiceBus_6.PersistenceExtensions<T>
        where T : NServiceBus_6.Persistence.PersistenceDefinition
        where S : NServiceBus_6.Persistence.StorageType
    {
        public PersistenceExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
    [System.ObsoleteAttribute("Use `PersistenceExtensions` instead. Will be removed in version 7.0.0.", true)]
    public class PersistenceExtentions
    {
        public PersistenceExtentions() { }
    }
    [System.ObsoleteAttribute("Use `PersistenceExtensions<T>` instead. Will be removed in version 7.0.0.", true)]
    public class PersistenceExtentions<T>
    {
        public PersistenceExtentions() { }
    }
    [System.ObsoleteAttribute("Use `PersistenceExtensions<T, S>` instead. Will be removed in version 7.0.0.", true)]
    public class PersistenceExtentions<T, S>
    {
        public PersistenceExtentions() { }
    }
    [System.ObsoleteAttribute("For performance reasons it is no longer possible to instrument the pipeline execu" +
        "tion. Will be removed in version 7.0.0.", true)]
    public class PipelineNotifications
    {
        public PipelineNotifications() { }
    }
    public class PublishOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        public PublishOptions() { }
    }
    public class ReceivePipelineCompleted
    {
        public ReceivePipelineCompleted(NServiceBus_6.Transport.IncomingMessage processedMessage, System.DateTime startedAt, System.DateTime completedAt) { }
        public System.DateTime CompletedAt { get; }
        public NServiceBus_6.Transport.IncomingMessage ProcessedMessage { get; }
        public System.DateTime StartedAt { get; }
    }
    public class static ReceivePipelineConfigExtensions
    {
        public static void OnReceivePipelineCompleted(this NServiceBus_6.Pipeline.PipelineSettings pipelineSettings, System.Func<NServiceBus_6.ReceivePipelineCompleted, System.Threading.Tasks.Task> subscription) { }
    }
    public class static ReceiveSettingsExtensions
    {
        public static void MakeInstanceUniquelyAddressable(this NServiceBus_6.EndpointConfiguration config, string discriminator) { }
        public static void OverrideLocalAddress(this NServiceBus_6.EndpointConfiguration config, string baseInputQueueName) { }
    }
    public abstract class RecoverabilityAction
    {
        protected internal RecoverabilityAction() { }
        public static NServiceBus_6.DelayedRetry DelayedRetry(System.TimeSpan timeSpan) { }
        public static NServiceBus_6.ImmediateRetry ImmediateRetry() { }
        public static NServiceBus_6.MoveToError MoveToError(string errorQueue) { }
    }
    public class RecoverabilityConfig
    {
        public RecoverabilityConfig(NServiceBus_6.ImmediateConfig immediateConfig, NServiceBus_6.DelayedConfig delayedConfig, NServiceBus_6.FailedConfig failedConfig) { }
        public NServiceBus_6.DelayedConfig Delayed { get; }
        public NServiceBus_6.FailedConfig Failed { get; }
        public NServiceBus_6.ImmediateConfig Immediate { get; }
    }
    public class static RecoverabilityEndpointConfigurationExtensions
    {
        public static NServiceBus_6.RecoverabilitySettings Recoverability(this NServiceBus_6.EndpointConfiguration configuration) { }
    }
    public class RecoverabilitySettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public NServiceBus_6.RecoverabilitySettings AddUnrecoverableException<T>()
            where T : System.Exception { }
        public NServiceBus_6.RecoverabilitySettings AddUnrecoverableException(System.Type exceptionType) { }
        public NServiceBus_6.RecoverabilitySettings CustomPolicy(System.Func<NServiceBus_6.RecoverabilityConfig, NServiceBus_6.Transport.ErrorContext, NServiceBus_6.RecoverabilityAction> custom) { }
        public NServiceBus_6.RecoverabilitySettings Delayed(System.Action<NServiceBus_6.DelayedRetriesSettings> customizations) { }
        public NServiceBus_6.RecoverabilitySettings DisableLegacyRetriesSatellite() { }
        public NServiceBus_6.RecoverabilitySettings Failed(System.Action<NServiceBus_6.RetryFailedSettings> customizations) { }
        public NServiceBus_6.RecoverabilitySettings Immediate(System.Action<NServiceBus_6.ImmediateRetriesSettings> customizations) { }
    }
    public class static RecoverabilitySettingsExtensions
    {
        public static void AddUnrecoverableException(this NServiceBus_6.Settings.SettingsHolder settings, System.Type exceptionType) { }
    }
    public class ReplyOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        public ReplyOptions() { }
    }
    public class RetryFailedSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public NServiceBus_6.RetryFailedSettings HeaderCustomization(System.Action<System.Collections.Generic.Dictionary<string, string>> customization) { }
    }
    public class static RoutingFeatureSettingsExtensions
    {
        public static void OverridePublicReturnAddress(this NServiceBus_6.EndpointConfiguration configuration, string address) { }
    }
    public class static RoutingOptionExtensions
    {
        public static string GetDestination(this NServiceBus_6.ReplyOptions options) { }
        public static string GetDestination(this NServiceBus_6.SendOptions options) { }
        public static string GetReplyToRoute(this NServiceBus_6.ReplyOptions options) { }
        public static string GetReplyToRoute(this NServiceBus_6.SendOptions options) { }
        public static string GetRouteToSpecificInstance(this NServiceBus_6.SendOptions options) { }
        public static bool IsRoutingReplyToAnyInstance(this NServiceBus_6.SendOptions options) { }
        public static bool IsRoutingReplyToAnyInstance(this NServiceBus_6.ReplyOptions options) { }
        public static bool IsRoutingReplyToThisInstance(this NServiceBus_6.SendOptions options) { }
        public static bool IsRoutingReplyToThisInstance(this NServiceBus_6.ReplyOptions options) { }
        public static bool IsRoutingToThisEndpoint(this NServiceBus_6.SendOptions options) { }
        public static bool IsRoutingToThisInstance(this NServiceBus_6.SendOptions options) { }
        public static void RouteReplyTo(this NServiceBus_6.ReplyOptions options, string address) { }
        public static void RouteReplyTo(this NServiceBus_6.SendOptions options, string address) { }
        public static void RouteReplyToAnyInstance(this NServiceBus_6.SendOptions options) { }
        public static void RouteReplyToAnyInstance(this NServiceBus_6.ReplyOptions options) { }
        public static void RouteReplyToThisInstance(this NServiceBus_6.SendOptions options) { }
        public static void RouteReplyToThisInstance(this NServiceBus_6.ReplyOptions options) { }
        public static void RouteToSpecificInstance(this NServiceBus_6.SendOptions options, string instanceId) { }
        public static void RouteToThisEndpoint(this NServiceBus_6.SendOptions options) { }
        public static void RouteToThisInstance(this NServiceBus_6.SendOptions options) { }
        public static void SetDestination(this NServiceBus_6.SendOptions options, string destination) { }
        public static void SetDestination(this NServiceBus_6.ReplyOptions options, string destination) { }
    }
    public class RoutingSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public RoutingSettings(NServiceBus_6.Settings.SettingsHolder settings) { }
        public void DoNotEnforceBestPractices() { }
        public void RouteToEndpoint(System.Type messageType, string destination) { }
        public void RouteToEndpoint(System.Reflection.Assembly assembly, string destination) { }
        public void RouteToEndpoint(System.Reflection.Assembly assembly, string @namespace, string destination) { }
    }
    public class RoutingSettings<T> : NServiceBus_6.RoutingSettings
        where T : NServiceBus_6.Transport.TransportDefinition
    {
        public RoutingSettings(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
    public class static RoutingSettingsExtensions
    {
        public static NServiceBus_6.RoutingSettings Routing(this NServiceBus_6.TransportExtensions config) { }
        public static NServiceBus_6.RoutingSettings<T> Routing<T>(this NServiceBus_6.TransportExtensions<T> config)
            where T : NServiceBus_6.Transport.TransportDefinition { }
    }
    public abstract class Saga
    {
        protected Saga() { }
        [System.ObsoleteAttribute("Sagas no longer provide access to bus operations via the .Bus property. Use the c" +
            "ontext parameter on the Handle method. The member currently throws a NotImplemen" +
            "tedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.IBus Bus { get; set; }
        public bool Completed { get; }
        public NServiceBus_6.IContainSagaData Entity { get; set; }
        protected internal abstract void ConfigureHowToFindSaga(NServiceBus_6.IConfigureHowToFindSagaWithMessage sagaMessageFindingConfiguration);
        protected void MarkAsComplete() { }
        protected System.Threading.Tasks.Task ReplyToOriginator(NServiceBus_6.IMessageHandlerContext context, object message) { }
        [System.ObsoleteAttribute("Use `ReplyToOriginator(IMessageHandlerContext, object)` instead. The member curre" +
            "ntly throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        protected void ReplyToOriginator(object message) { }
        [System.ObsoleteAttribute("Construct the message and pass it to the non Action overload. Use `ReplyToOrigina" +
            "tor(IMessageHandlerContext, object)` instead. The member currently throws a NotI" +
            "mplementedException. Will be removed in version 7.0.0.", true)]
        protected virtual void ReplyToOriginator<TMessage>(System.Action<TMessage> messageConstructor) { }
        protected System.Threading.Tasks.Task RequestTimeout<TTimeoutMessageType>(NServiceBus_6.IMessageHandlerContext context, System.DateTime at)
            where TTimeoutMessageType : new() { }
        protected System.Threading.Tasks.Task RequestTimeout<TTimeoutMessageType>(NServiceBus_6.IMessageHandlerContext context, System.DateTime at, TTimeoutMessageType timeoutMessage) { }
        protected System.Threading.Tasks.Task RequestTimeout<TTimeoutMessageType>(NServiceBus_6.IMessageHandlerContext context, System.TimeSpan within)
            where TTimeoutMessageType : new() { }
        protected System.Threading.Tasks.Task RequestTimeout<TTimeoutMessageType>(NServiceBus_6.IMessageHandlerContext context, System.TimeSpan within, TTimeoutMessageType timeoutMessage) { }
        [System.ObsoleteAttribute("Use `RequestTimeout<TTimeoutMessageType>(IMessageHandlerContext, DateTime)` inste" +
            "ad. The member currently throws a NotImplementedException. Will be removed in ve" +
            "rsion 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.DateTime at) { }
        [System.ObsoleteAttribute("Construct the message and pass it to the non Action overload. Use `RequestTimeout" +
            "<TTimeoutMessageType>(IMessageHandlerContext DateTime, TTimeoutMessageType)` ins" +
            "tead. The member currently throws a NotImplementedException. Will be removed in " +
            "version 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.DateTime at, System.Action<TTimeoutMessageType> action) { }
        [System.ObsoleteAttribute("Use `RequestTimeout<TTimeoutMessageType>(IMessageHandlerContext, DateTime, TTimeo" +
            "utMessageType)` instead. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.DateTime at, TTimeoutMessageType timeoutMessage) { }
        [System.ObsoleteAttribute("Use `RequestTimeout<TTimeoutMessageType>(IMessageHandlerContext, TimeSpan)` inste" +
            "ad. The member currently throws a NotImplementedException. Will be removed in ve" +
            "rsion 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.TimeSpan within) { }
        [System.ObsoleteAttribute(@"Construct the message and pass it to the non Action overload. Use `Saga.RequestTimeout<TTimeoutMessageType>(IMessageHandlerContext, TimeSpan, TTimeoutMessageType)` instead. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.TimeSpan within, System.Action<TTimeoutMessageType> messageConstructor) { }
        [System.ObsoleteAttribute("Use `RequestTimeout<TTimeoutMessageType>(IMessageHandlerContext, TimeSpan, TTimeo" +
            "utMessageType)` instead. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        protected void RequestTimeout<TTimeoutMessageType>(System.TimeSpan within, TTimeoutMessageType timeoutMessage) { }
    }
    public abstract class Saga<TSagaData> : NServiceBus_6.Saga
        where TSagaData : NServiceBus_6.IContainSagaData, new ()
    {
        protected Saga() { }
        public TSagaData Data { get; set; }
        protected internal override void ConfigureHowToFindSaga(NServiceBus_6.IConfigureHowToFindSagaWithMessage sagaMessageFindingConfiguration) { }
        protected abstract void ConfigureHowToFindSaga(NServiceBus_6.SagaPropertyMapper<TSagaData> mapper);
    }
    public class SagaPropertyMapper<TSagaData>
        where TSagaData : NServiceBus_6.IContainSagaData
    {
        public NServiceBus_6.ToSagaExpression<TSagaData, TMessage> ConfigureMapping<TMessage>(System.Linq.Expressions.Expression<System.Func<TMessage, object>> messageProperty) { }
    }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public class static ScaleOutExtentions
    {
        [System.ObsoleteAttribute("The member currently throws a NotImplementedException. Will be removed in version" +
            " 7.0.0.", true)]
        public static NServiceBus_6.Settings.ScaleOutSettings ScaleOut(this NServiceBus_6.EndpointConfiguration config) { }
    }
    [System.ObsoleteAttribute("Use extension methods provided on ISendOnlyBus. Will be removed in version 7.0.0." +
        "", true)]
    public class Schedule
    {
        public Schedule() { }
    }
    public class ScheduledTask : NServiceBus_6.IMessage
    {
        public ScheduledTask() { }
        public System.TimeSpan Every { get; set; }
        public string Name { get; set; }
        public System.Guid TaskId { get; set; }
    }
    public class static ScheduleExtensions
    {
        [System.ObsoleteAttribute("Use `ScheduleEvery(this IMessageSession session, TimeSpan timeSpan, Func<IPipelin" +
            "eContext, Task> task)` instead. The member currently throws a NotImplementedExce" +
            "ption. Will be removed in version 7.0.0.", true)]
        public static void ScheduleEvery(this NServiceBus_6.IMessageSession session, System.TimeSpan timeSpan, System.Action task) { }
        [System.ObsoleteAttribute("Use `ScheduleEvery(this IMessageSession session, TimeSpan timeSpan, string name, " +
            "Func<IPipelineContext, Task> task)` instead. The member currently throws a NotIm" +
            "plementedException. Will be removed in version 7.0.0.", true)]
        public static void ScheduleEvery(this NServiceBus_6.IMessageSession session, System.TimeSpan timeSpan, string name, System.Action task) { }
        public static System.Threading.Tasks.Task ScheduleEvery(this NServiceBus_6.IMessageSession session, System.TimeSpan timeSpan, System.Func<NServiceBus_6.IPipelineContext, System.Threading.Tasks.Task> task) { }
        public static System.Threading.Tasks.Task ScheduleEvery(this NServiceBus_6.IMessageSession session, System.TimeSpan timeSpan, string name, System.Func<NServiceBus_6.IPipelineContext, System.Threading.Tasks.Task> task) { }
    }
    [System.ObsoleteAttribute("Use `endpointConfiguration.Recoverability().Delayed(delayed => )` instead. Will b" +
        "e removed in version 7.0.0.", true)]
    public class static SecondLevelRetriesConfigExtensions
    {
        [System.ObsoleteAttribute("Use `endpointConfiguration.Recoverability().Delayed(delayed => )` instead. The me" +
            "mber currently throws a NotImplementedException. Will be removed in version 7.0." +
            "0.", true)]
        public static NServiceBus_6.SecondLevelRetriesSettings SecondLevelRetries(this NServiceBus_6.EndpointConfiguration config) { }
    }
    [System.ObsoleteAttribute("Use `endpointConfiguration.Recoverability().CustomPolicy(Func<RecoverabilityConfi" +
        "g, ErrorContext, RecoverabilityAction> @custom)` instead. Will be removed in ver" +
        "sion 7.0.0.", true)]
    public class SecondLevelRetriesSettings
    {
        public SecondLevelRetriesSettings() { }
        [System.ObsoleteAttribute("Use `endpointConfiguration.Recoverability().CustomPolicy(Func<RecoverabilityConfi" +
            "g, ErrorContext, RecoverabilityAction> @custom)` instead. The member currently t" +
            "hrows a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void CustomRetryPolicy(System.Func<NServiceBus_6.TransportMessage, System.TimeSpan> customPolicy) { }
    }
    public class SendOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        public SendOptions() { }
    }
    public class static SerializationConfigExtensions
    {
        public static NServiceBus_6.Serialization.SerializationExtensions<T> AddDeserializer<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Serialization.SerializationDefinition, new () { }
        public static NServiceBus_6.Serialization.SerializationExtensions<T> AddDeserializer<T>(this NServiceBus_6.EndpointConfiguration config, T serializationDefinition)
            where T : NServiceBus_6.Serialization.SerializationDefinition { }
        public static NServiceBus_6.Serialization.SerializationExtensions<T> UseSerialization<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.Serialization.SerializationDefinition, new () { }
        public static NServiceBus_6.Serialization.SerializationExtensions<T> UseSerialization<T>(this NServiceBus_6.EndpointConfiguration config, T serializationDefinition)
            where T : NServiceBus_6.Serialization.SerializationDefinition { }
        [System.ObsoleteAttribute("To use a custom serializer derive from SerializationDefinition and provide a fact" +
            "ory method for creating the serializer instance. The member currently throws a N" +
            "otImplementedException. Will be removed in version 7.0.0.", true)]
        public static void UseSerialization(this NServiceBus_6.EndpointConfiguration config, System.Type serializerType) { }
    }
    public class static SerializationContextExtensions
    {
        public static bool ShouldSkipSerialization(this NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext context) { }
        public static void SkipSerialization(this NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext context) { }
    }
    [System.ObsoleteAttribute("Use `SerializationExtensions<T>` instead. Will be removed in version 7.0.0.", true)]
    public class SerializationExtentions<T>
    {
        public SerializationExtentions() { }
    }
    public class static SettingsExtensions
    {
        public static string EndpointName(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static System.Collections.Generic.IList<System.Type> GetAvailableTypes(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static T GetConfigSection<T>(this NServiceBus_6.Settings.ReadOnlySettings settings)
            where T :  class, new () { }
        public static string InstanceSpecificQueue(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static string LocalAddress(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
        public static NServiceBus_6.LogicalAddress LogicalAddress(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
    }
    [System.ObsoleteAttribute("Use `SettingsExtensions` instead. Will be removed in version 7.0.0.", true)]
    public class static SettingsExtentions { }
    [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
        "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
        " removed in version 8.0.0.", false)]
    public class static SLAMonitoringConfig
    {
        [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
            "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 8.0.0.", false)]
        public static void EnableSLAPerformanceCounter(this NServiceBus_6.EndpointConfiguration config, System.TimeSpan sla) { }
        [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
            "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 8.0.0.", false)]
        public static void EnableSLAPerformanceCounter(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class static StaticHeadersConfigExtensions
    {
        public static void AddHeaderToAllOutgoingMessages(this NServiceBus_6.EndpointConfiguration config, string key, string value) { }
    }
    public class SubscribeOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        public SubscribeOptions() { }
    }
    public class TimeoutManagerConfiguration
    {
        public TimeoutManagerConfiguration(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
    public class static TimeoutManagerConfigurationExtensions
    {
        public static void LimitMessageProcessingConcurrencyTo(this NServiceBus_6.TimeoutManagerConfiguration timeoutManagerConfiguration, int maxConcurrency) { }
        public static NServiceBus_6.TimeoutManagerConfiguration TimeoutManager(this NServiceBus_6.EndpointConfiguration endpointConfiguration) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.All)]
    public sealed class TimeToBeReceivedAttribute : System.Attribute
    {
        public TimeToBeReceivedAttribute(string timeSpan) { }
        public System.TimeSpan TimeToBeReceived { get; }
    }
    public class static TimeToBeReceivedConventionExtensions
    {
        public static NServiceBus_6.ConventionsBuilder DefiningTimeToBeReceivedAs(this NServiceBus_6.ConventionsBuilder builder, System.Func<System.Type, System.TimeSpan> retrieveTimeToBeReceived) { }
    }
    public class ToSagaExpression<TSagaData, TMessage>
        where TSagaData : NServiceBus_6.IContainSagaData
    {
        public ToSagaExpression(NServiceBus_6.IConfigureHowToFindSagaWithMessage sagaMessageFindingConfiguration, System.Linq.Expressions.Expression<System.Func<TMessage, object>> messageProperty) { }
        public void ToSaga(System.Linq.Expressions.Expression<System.Func<TSagaData, object>> sagaEntityProperty) { }
    }
    public class TransportExtensions : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public TransportExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
        public NServiceBus_6.TransportExtensions ConnectionString(string connectionString) { }
        public NServiceBus_6.TransportExtensions ConnectionString(System.Func<string> connectionString) { }
        public NServiceBus_6.TransportExtensions ConnectionStringName(string name) { }
        public NServiceBus_6.TransportExtensions Transactions(NServiceBus_6.TransportTransactionMode transportTransactionMode) { }
    }
    public class TransportExtensions<T> : NServiceBus_6.TransportExtensions
        where T : NServiceBus_6.Transport.TransportDefinition
    {
        public TransportExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
        public NServiceBus_6.TransportExtensions<T> ConnectionString(string connectionString) { }
        public NServiceBus_6.TransportExtensions<T> ConnectionString(System.Func<string> connectionString) { }
        public NServiceBus_6.TransportExtensions<T> ConnectionStringName(string name) { }
        public NServiceBus_6.TransportExtensions<T> Transactions(NServiceBus_6.TransportTransactionMode transportTransactionMode) { }
    }
    [System.ObsoleteAttribute("Not used anymore, use `OutgoingMessage` or `IncomingMessage` instead. Will be rem" +
        "oved in version 7.0.0.", true)]
    public class TransportMessage
    {
        public TransportMessage() { }
        [System.ObsoleteAttribute("Use the value of the \'IncomingMessage.Body\' or \'OutgoingMessage.Body\' instead. Th" +
            "e member currently throws a NotImplementedException. Will be removed in version " +
            "7.0.0.", true)]
        public byte[] Body { get; set; }
        [System.ObsoleteAttribute("Use the value of the \'NServiceBus.CorrelationId\' header instead. The member curre" +
            "ntly throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public string CorrelationId { get; set; }
        [System.ObsoleteAttribute("Use the value of the \'IncomingMessage.Headers\' or \'OutgoingMesssage.Headers\' inst" +
            "ead. Will be removed in version 7.0.0.", true)]
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        [System.ObsoleteAttribute("Use the value of the \'IncomingMessage.MessageId\' or \'OutgoingMesssage.MessageId\' " +
            "instead. The member currently throws a NotImplementedException. Will be removed " +
            "in version 7.0.0.", true)]
        public string Id { get; }
        [System.ObsoleteAttribute("Use `GetMessageIntent(this IncomingMessage message)` instead. The member currentl" +
            "y throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.MessageIntentEnum MessageIntent { get; }
        [System.ObsoleteAttribute(@"For sending purposes use `DeliveryConstraintContextExtensions.AddDeliveryConstraint(new NonDurableDelivery())` to set NonDurable delivery or `NonDurableDelivery constraint;DeliveryConstraintContextExtensions.TryGetDeliveryConstraint(out constraint)` to read wether NonDurable delivery is set. When receiving look at the new 'NServiceBus.NonDurableMessage' header. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public bool Recoverable { get; set; }
        [System.ObsoleteAttribute("Use `GetReplyToAddress(this IncomingMessage message)` instead. The member current" +
            "ly throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public string ReplyToAddress { get; }
        [System.ObsoleteAttribute(@"For sending purposes use `DeliveryConstraintContextExtensions.AddDeliveryConstraint(new DiscardIfNotReceivedBefore(timeToBeReceived))` to set the `TimeToBeReceived` or `DiscardIfNotReceivedBefore constraint;DeliveryConstraintContextExtensions.TryGetDeliveryConstraint(out constraint)` to read the `TimeToBeReceived`. When receiving look at the new 'NServiceBus.TimeToBeReceived' header. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public System.TimeSpan TimeToBeReceived { get; set; }
    }
    public enum TransportTransactionMode
    {
        None = 0,
        ReceiveOnly = 1,
        SendsAtomicWithReceive = 2,
        TransactionScope = 3,
    }
    public class UnitOfWorkSettings
    {
        public NServiceBus_6.UnitOfWorkSettings WrapHandlersInATransactionScope(System.Nullable<System.TimeSpan> timeout = null, System.Nullable<System.Transactions.IsolationLevel> isolationLevel = null) { }
    }
    public class static UnitOfWorkSettingsExtensions
    {
        public static NServiceBus_6.UnitOfWorkSettings UnitOfWork(this NServiceBus_6.EndpointConfiguration config) { }
    }
    public class UnsubscribeOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        public UnsubscribeOptions() { }
    }
    public class static UseDataBusExtensions
    {
        public static NServiceBus_6.DataBus.DataBusExtensions<T> UseDataBus<T>(this NServiceBus_6.EndpointConfiguration config)
            where T : NServiceBus_6.DataBus.DataBusDefinition, new () { }
        public static NServiceBus_6.DataBus.DataBusExtensions UseDataBus(this NServiceBus_6.EndpointConfiguration config, System.Type dataBusType) { }
    }
    public class static UseTransportExtensions
    {
        public static NServiceBus_6.TransportExtensions<T> UseTransport<T>(this NServiceBus_6.EndpointConfiguration endpointConfiguration)
            where T : NServiceBus_6.Transport.TransportDefinition, new () { }
        public static NServiceBus_6.TransportExtensions UseTransport(this NServiceBus_6.EndpointConfiguration endpointConfiguration, System.Type transportDefinitionType) { }
    }
    [System.ObsoleteAttribute(@"Message property encryption is released as a dedicated 'NServiceBus_6.Encryption.MessageProperty' package. Use `NServiceBus_6.Encryption.MessageProperty.EncryptedString` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
    public class WireEncryptedString : System.Runtime.Serialization.ISerializable
    {
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public WireEncryptedString() { }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public WireEncryptedString(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        [System.ObsoleteAttribute("No longer required. Will be removed in version 7.0.0.", true)]
        public string Base64Iv { get; set; }
        [System.ObsoleteAttribute("No longer required. Will be removed in version 7.0.0.", true)]
        public string EncryptedBase64Value { get; set; }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public NServiceBus_6.EncryptedValue EncryptedValue { get; set; }
        [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
            "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
            "e removed in version 8.0.0.", false)]
        public string Value { get; set; }
        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    public class static XmlSerializationExtensions
    {
        public static NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> DontWrapRawXml(this NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> config) { }
        [System.ObsoleteAttribute("Use `DontWrapRawXml(this SerializationExtensions<XmlSerializer> config)` instead." +
            " The member currently throws a NotImplementedException. Will be removed in versi" +
            "on 7.0.0.", true)]
        public static NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> DontWrapRawXml(this NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> config) { }
        public static NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> Namespace(this NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> config, string namespaceToUse) { }
        [System.ObsoleteAttribute("Use `Namespace(this SerializationExtensions<XmlSerializer> config, string namespa" +
            "ceToUse)` instead. The member currently throws a NotImplementedException. Will b" +
            "e removed in version 7.0.0.", true)]
        public static NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> Namespace(this NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> config, string namespaceToUse) { }
        public static NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> SanitizeInput(this NServiceBus_6.Serialization.SerializationExtensions<NServiceBus_6.XmlSerializer> config) { }
        [System.ObsoleteAttribute("Use `SanitizeInput(this SerializationExtensions<XmlSerializer> config)` instead. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 7.0.0.", true)]
        public static NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> SanitizeInput(this NServiceBus_6.SerializationExtentions<NServiceBus_6.XmlSerializer> config) { }
    }
    public class XmlSerializer : NServiceBus_6.Serialization.SerializationDefinition
    {
        public XmlSerializer() { }
        public override System.Func<NServiceBus_6.MessageInterfaces.IMessageMapper, NServiceBus_6.Serialization.IMessageSerializer> Configure(NServiceBus_6.Settings.ReadOnlySettings settings) { }
    }
}
namespace NServiceBus_6.AutomaticSubscriptions.Config
{
    public class AutoSubscribeSettings
    {
        [System.ObsoleteAttribute("Encourages bad practices. IMessageSession.Subscribe should be explicitly used. Th" +
            "e member currently throws a NotImplementedException. Will be removed in version " +
            "7.0.0.", true)]
        public void AutoSubscribePlainMessages() { }
        public void DoNotAutoSubscribeSagas() { }
        [System.ObsoleteAttribute("Transports with support for centralized pubsub will default this to true. Can saf" +
            "ely be removed. The member currently throws a NotImplementedException. Will be r" +
            "emoved in version 7.0.0.", true)]
        public void DoNotRequireExplicitRouting() { }
    }
}
namespace NServiceBus_6.Config
{
    [System.ObsoleteAttribute("Use of the application configuration file to configure auditing is discouraged. W" +
        "ill be treated as an error from version 7.0.0. Will be removed in version 8.0.0." +
        "", false)]
    public class AuditConfig : System.Configuration.ConfigurationSection
    {
        public AuditConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("OverrideTimeToBeReceived", IsRequired=false)]
        [System.ObsoleteAttribute("Use of the application configuration file to configure auditing is discouraged. U" +
            "se `EndpointConfiguration.AuditProcessedMessagesTo` instead. Will be treated as " +
            "an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public System.TimeSpan OverrideTimeToBeReceived { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("QueueName", IsRequired=false)]
        [System.ObsoleteAttribute("Use of the application configuration file to configure auditing is discouraged. U" +
            "se `EndpointConfiguration.AuditProcessedMessagesTo` instead. Will be treated as " +
            "an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public string QueueName { get; set; }
    }
    [System.ObsoleteAttribute("Use the feature concept instead via A class which inherits from `NServiceBus_6.Fe" +
        "atures.Feature` and use `configuration.EnableFeature<YourClass>()`. Will be remo" +
        "ved in version 7.0.0.", true)]
    public interface IWantToRunWhenConfigurationIsComplete { }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public enum KeyFormat
    {
        Ascii = 0,
        Base64 = 1,
    }
    [System.ObsoleteAttribute("Logging configuration via configuration section is discouraged. Use `LogManager.U" +
        "se<DefaultFactory>()` instead. Will be treated as an error from version 7.0.0. W" +
        "ill be removed in version 8.0.0.", false)]
    public class Logging : System.Configuration.ConfigurationSection
    {
        public Logging() { }
        [System.Configuration.ConfigurationPropertyAttribute("Threshold", DefaultValue="Info", IsRequired=true)]
        [System.ObsoleteAttribute("Logging configuration via configuration section is discouraged. Use `LogManager.U" +
            "se<DefaultFactory>().Level(LogLevel)` instead. Will be treated as an error from " +
            "version 7.0.0. Will be removed in version 8.0.0.", false)]
        public string Threshold { get; set; }
    }
    [System.ObsoleteAttribute("Use `EndpointConfiguration.EnlistWithLegacyMSMQDistributor` instead. Will be remo" +
        "ved in version 7.0.0.", true)]
    public class MasterNodeConfig : System.Configuration.ConfigurationSection
    {
        public MasterNodeConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("Node", IsRequired=false)]
        [System.ObsoleteAttribute("Use `EndpointConfiguration.EnlistWithLegacyMSMQDistributor` instead. Will be remo" +
            "ved in version 7.0.0.", true)]
        public string Node { get; set; }
    }
    public class MessageEndpointMapping : System.Configuration.ConfigurationElement, System.IComparable<NServiceBus_6.Config.MessageEndpointMapping>
    {
        public MessageEndpointMapping() { }
        [System.Configuration.ConfigurationPropertyAttribute("Assembly", IsRequired=false)]
        public string AssemblyName { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Endpoint", IsRequired=true)]
        public string Endpoint { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Messages", IsRequired=false)]
        public string Messages { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Namespace", IsRequired=false)]
        public string Namespace { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Type", IsRequired=false)]
        public string TypeFullName { get; set; }
        public int CompareTo(NServiceBus_6.Config.MessageEndpointMapping other) { }
        public void Configure(System.Action<System.Type, string> mapTypeToEndpoint) { }
    }
    public class MessageEndpointMappingCollection : System.Configuration.ConfigurationElementCollection
    {
        public MessageEndpointMappingCollection() { }
        public new string AddElementName { get; set; }
        public new string ClearElementName { get; set; }
        public override System.Configuration.ConfigurationElementCollectionType CollectionType { get; }
        public new int Count { get; }
        public NServiceBus_6.Config.MessageEndpointMapping this[int index] { get; set; }
        public NServiceBus_6.Config.MessageEndpointMapping this[string Name] { get; }
        public new string RemoveElementName { get; }
        public void Add(NServiceBus_6.Config.MessageEndpointMapping mapping) { }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        public void Clear() { }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { }
        protected override System.Configuration.ConfigurationElement CreateNewElement(string elementName) { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { }
        public int IndexOf(NServiceBus_6.Config.MessageEndpointMapping mapping) { }
        public override bool IsReadOnly() { }
        public void Remove(NServiceBus_6.Config.MessageEndpointMapping mapping) { }
        public void Remove(string name) { }
        public void RemoveAt(int index) { }
    }
    [System.ObsoleteAttribute("Error queue configuration via configuration section is discouraged. Use `Endpoint" +
        "Configuration.SendFailedMessagesTo` instead. Will be treated as an error from ve" +
        "rsion 7.0.0. Will be removed in version 8.0.0.", false)]
    public class MessageForwardingInCaseOfFaultConfig : System.Configuration.ConfigurationSection
    {
        public MessageForwardingInCaseOfFaultConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("ErrorQueue", IsRequired=true)]
        [System.ObsoleteAttribute("Error queue configuration via configuration section is discouraged. Use `Endpoint" +
            "Configuration.SendFailedMessagesTo` instead. Will be treated as an error from ve" +
            "rsion 7.0.0. Will be removed in version 8.0.0.", false)]
        public string ErrorQueue { get; set; }
    }
    [System.ObsoleteAttribute("Configuring MSMQ subscription storage via configuration section is discouraged. U" +
        "se `EndpointConfiguration.UsePersistence<MsmqPersistence>()` instead. Will be tr" +
        "eated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
    public class MsmqSubscriptionStorageConfig : System.Configuration.ConfigurationSection
    {
        public MsmqSubscriptionStorageConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("Queue", IsRequired=true)]
        [System.ObsoleteAttribute("Configuring MSMQ subscription storage via configuration section is discouraged. U" +
            "se `EndpointConfiguration.UsePersistence<MsmqPersistence>().SubscriptionQueue` i" +
            "nstead. Will be treated as an error from version 7.0.0. Will be removed in versi" +
            "on 8.0.0.", false)]
        public string Queue { get; set; }
    }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public class RijndaelEncryptionServiceConfig : System.Configuration.ConfigurationSection
    {
        public RijndaelEncryptionServiceConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("ExpiredKeys", IsRequired=false)]
        public NServiceBus_6.Config.RijndaelExpiredKeyCollection ExpiredKeys { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("Key", IsRequired=true)]
        public string Key { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("KeyFormat", IsRequired=false)]
        public NServiceBus_6.Config.KeyFormat KeyFormat { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("KeyIdentifier", IsRequired=false)]
        public string KeyIdentifier { get; set; }
    }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public class RijndaelExpiredKey : System.Configuration.ConfigurationElement
    {
        public RijndaelExpiredKey() { }
        [System.Configuration.ConfigurationPropertyAttribute("Key", IsRequired=true)]
        public string Key { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("KeyFormat", IsRequired=false)]
        public NServiceBus_6.Config.KeyFormat KeyFormat { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("KeyIdentifier", IsRequired=false)]
        public string KeyIdentifier { get; set; }
    }
    [System.ObsoleteAttribute("Message property encryption is released as a dedicated \'NServiceBus_6.Encryption." +
        "MessageProperty\' package. Will be treated as an error from version 7.0.0. Will b" +
        "e removed in version 8.0.0.", false)]
    public class RijndaelExpiredKeyCollection : System.Configuration.ConfigurationElementCollection
    {
        public RijndaelExpiredKeyCollection() { }
        public override System.Configuration.ConfigurationElementCollectionType CollectionType { get; }
        public NServiceBus_6.Config.RijndaelExpiredKey this[int index] { get; set; }
        public NServiceBus_6.Config.RijndaelExpiredKey this[string key] { get; }
        public void Add(NServiceBus_6.Config.RijndaelExpiredKey mapping) { }
        protected override void BaseAdd(System.Configuration.ConfigurationElement element) { }
        public void Clear() { }
        protected override System.Configuration.ConfigurationElement CreateNewElement() { }
        protected override System.Configuration.ConfigurationElement CreateNewElement(string elementName) { }
        protected override object GetElementKey(System.Configuration.ConfigurationElement element) { }
        public int IndexOf(NServiceBus_6.Config.RijndaelExpiredKey encryptionKey) { }
        public override bool IsReadOnly() { }
        public void Remove(NServiceBus_6.Config.RijndaelExpiredKey mapping) { }
        public void Remove(string name) { }
        public void RemoveAt(int index) { }
    }
    [System.ObsoleteAttribute("Second Level Retries has been renamed to Delayed Retries. The app.config API has " +
        "been removed, use the code API via endpointConfiguration.Recoverability().Delaye" +
        "d(settings => ...);. Will be removed in version 7.0.0.", true)]
    public class SecondLevelRetriesConfig : System.Configuration.ConfigurationSection
    {
        public SecondLevelRetriesConfig() { }
        [System.ObsoleteAttribute(@"Second Level Retries has been renamed to Delayed Retries. The app.config API has been removed, use the code API via endpointConfiguration.Recoverability().Delayed(settings => ...);. To disable use endpointConfiguration.Recoverability().Delayed(settings => settings.NumberOfRetries(0));. Will be removed in version 7.0.0.", true)]
        public bool Enabled { get; set; }
        [System.ObsoleteAttribute(@"Second Level Retries has been renamed to Delayed Retries. The app.config API has been removed, use the code API via endpointConfiguration.Recoverability().Delayed(settings => ...);. To change the NumberOfRetries use endpointConfiguration.Recoverability().Delayed(settings => settings.NumberOfRetries(5);. Will be removed in version 7.0.0.", true)]
        public int NumberOfRetries { get; set; }
        [System.ObsoleteAttribute(@"Second Level Retries has been renamed to Delayed Retries. The app.config API has been removed, use the code API via endpointConfiguration.Recoverability().Delayed(settings => ...);. To change the TimeIncrease use endpointConfiguration.Recoverability().Delayed(settings => settings.TimeIncrease(TimeSpan.FromMinutes(5));. Will be removed in version 7.0.0.", true)]
        public System.TimeSpan TimeIncrease { get; set; }
    }
    [System.ObsoleteAttribute("The app.config API TransportConfig has been removed, use the code API. Will be re" +
        "moved in version 7.0.0.", true)]
    public class TransportConfig : System.Configuration.ConfigurationSection
    {
        public TransportConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("MaximumConcurrencyLevel", DefaultValue=0, IsRequired=false)]
        [System.ObsoleteAttribute("The app.config API TransportConfig has been removed, use the code API. To change " +
            "the concurrency level use endpointConfiguration.LimitMessageProcessingConcurrenc" +
            "yTo(1);. Will be removed in version 7.0.0.", true)]
        public int MaximumConcurrencyLevel { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("MaximumMessageThroughputPerSecond", DefaultValue=-1, IsRequired=false)]
        [System.ObsoleteAttribute("Message throughput throttling has been removed. Consult the documentation for fur" +
            "ther information. Will be removed in version 7.0.0.", true)]
        public int MaximumMessageThroughputPerSecond { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("MaxRetries", DefaultValue=5, IsRequired=false)]
        [System.ObsoleteAttribute("The app.config API TransportConfig has been removed, use the code API. To change " +
            "the NumberOfRetries use endpointConfiguration.Recoverability().Immediate(setting" +
            "s => settings.NumberOfRetries(5);. Will be removed in version 7.0.0.", true)]
        public int MaxRetries { get; set; }
    }
    [System.ObsoleteAttribute("Use of the application configuration file to configure the endpoint is discourage" +
        "d. Use the code first API instead. Will be treated as an error from version 7.0." +
        "0. Will be removed in version 8.0.0.", false)]
    public class UnicastBusConfig : System.Configuration.ConfigurationSection
    {
        public UnicastBusConfig() { }
        [System.Configuration.ConfigurationPropertyAttribute("DistributorControlAddress", IsRequired=false)]
        [System.ObsoleteAttribute("Switch to the code API by using \'EndpointConfiguration.EnlistWithLegacyMSMQDistri" +
            "butor\' instead. Will be removed in version 7.0.0.", true)]
        public string DistributorControlAddress { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("DistributorDataAddress", IsRequired=false)]
        [System.ObsoleteAttribute("Switch to the code API by using \'EndpointConfiguration.EnlistWithLegacyMSMQDistri" +
            "butor\' instead. Will be removed in version 7.0.0.", true)]
        public string DistributorDataAddress { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("ForwardReceivedMessagesTo", IsRequired=false)]
        [System.ObsoleteAttribute("Use \'EndpointConfiguration.ForwardReceivedMessagesTo\' to configure the forwarding" +
            " address. Will be removed in version 7.0.0.", true)]
        public string ForwardReceivedMessagesTo { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("MessageEndpointMappings", IsRequired=false)]
        [System.ObsoleteAttribute("Use of the application configuration file to configure routing is discouraged. Us" +
            "e `EndpointConfiguration.UseTransport<T>.Routing()` instead. Will be treated as " +
            "an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public NServiceBus_6.Config.MessageEndpointMappingCollection MessageEndpointMappings { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("TimeoutManagerAddress", IsRequired=false)]
        [System.ObsoleteAttribute("Use of the application configuration file to configure an external TimeoutManager" +
            " address is discouraged. Use `EndpointConfiguration.UseExternalTimeoutManager` i" +
            "nstead. Will be treated as an error from version 7.0.0. Will be removed in versi" +
            "on 8.0.0.", false)]
        public string TimeoutManagerAddress { get; set; }
        [System.Configuration.ConfigurationPropertyAttribute("TimeToBeReceivedOnForwardedMessages", IsRequired=false)]
        [System.ObsoleteAttribute("Use of the application configuration file to configure TimeToBeReceived in forwar" +
            "ded messages is discouraged. Will be treated as an error from version 7.0.0. Wil" +
            "l be removed in version 8.0.0.", false)]
        public System.TimeSpan TimeToBeReceivedOnForwardedMessages { get; set; }
    }
}
namespace NServiceBus_6.Config.ConfigurationSource
{
    public class DefaultConfigurationSource : NServiceBus_6.Config.ConfigurationSource.IConfigurationSource
    {
        public DefaultConfigurationSource() { }
    }
    [System.ObsoleteAttribute("The use of the IConfigurationSource is discouraged. Code configuration is prefere" +
        "d over configuration sources. Will be treated as an error from version 7.0.0. Wi" +
        "ll be removed in version 8.0.0.", false)]
    public interface IConfigurationSource
    {
        T GetConfiguration<T>()
            where T :  class, new ();
    }
    [System.ObsoleteAttribute("The use of the IConfigurationSource is discouraged. Code configuration is prefere" +
        "d over configuration sources. Will be treated as an error from version 7.0.0. Wi" +
        "ll be removed in version 8.0.0.", false)]
    public interface IProvideConfiguration<T>
    {
        T GetConfiguration();
    }
}
namespace NServiceBus_6.Configuration.AdvanceExtensibility
{
    public class static AdvanceExtensibilityExtensions
    {
        public static NServiceBus_6.Settings.SettingsHolder GetSettings(this NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings config) { }
    }
    public abstract class ExposeSettings
    {
        protected ExposeSettings(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
}
namespace NServiceBus_6.ConsistencyGuarantees
{
    public class static TransactionModeSettingsExtensions
    {
        public static NServiceBus_6.TransportTransactionMode GetRequiredTransactionModeForReceives(this NServiceBus_6.Settings.ReadOnlySettings settings) { }
    }
}
namespace NServiceBus_6.Container
{
    public class ContainerCustomizations
    {
        public NServiceBus_6.Settings.SettingsHolder Settings { get; }
    }
    public abstract class ContainerDefinition
    {
        protected ContainerDefinition() { }
        public abstract NServiceBus_6.ObjectBuilder.Common.IContainer CreateContainer(NServiceBus_6.Settings.ReadOnlySettings settings);
    }
}
namespace NServiceBus_6.DataBus
{
    public abstract class DataBusDefinition
    {
        protected DataBusDefinition() { }
        protected internal abstract System.Type ProvidedByFeature();
    }
    public class DataBusExtensions : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public DataBusExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
    public class DataBusExtensions<T> : NServiceBus_6.DataBus.DataBusExtensions
        where T : NServiceBus_6.DataBus.DataBusDefinition
    {
        public DataBusExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
    [System.ObsoleteAttribute("Use `DataBusExtensions` instead. Will be removed in version 7.0.0.", true)]
    public class DataBusExtentions
    {
        public DataBusExtentions() { }
    }
    [System.ObsoleteAttribute("Use `DataBusExtensions<T>` instead. Will be removed in version 7.0.0.", true)]
    public class DataBusExtentions<T>
    {
        public DataBusExtentions() { }
    }
    public interface IDataBus
    {
        System.Threading.Tasks.Task<System.IO.Stream> Get(string key);
        System.Threading.Tasks.Task<string> Put(System.IO.Stream stream, System.TimeSpan timeToBeReceived);
        System.Threading.Tasks.Task Start();
    }
    public interface IDataBusSerializer
    {
        object Deserialize(System.IO.Stream stream);
        void Serialize(object databusProperty, System.IO.Stream stream);
    }
}
namespace NServiceBus_6.DelayedDelivery
{
    public class DelayDeliveryWith : NServiceBus_6.DelayedDelivery.DelayedDeliveryConstraint
    {
        public DelayDeliveryWith(System.TimeSpan delay) { }
        public System.TimeSpan Delay { get; }
    }
    public abstract class DelayedDeliveryConstraint : NServiceBus_6.DeliveryConstraints.DeliveryConstraint
    {
        protected DelayedDeliveryConstraint() { }
    }
    public class DoNotDeliverBefore : NServiceBus_6.DelayedDelivery.DelayedDeliveryConstraint
    {
        public DoNotDeliverBefore(System.DateTime at) { }
        public System.DateTime At { get; }
    }
    public class static ExternalTimeoutManagerConfigurationExtensions
    {
        public static void UseExternalTimeoutManager(this NServiceBus_6.EndpointConfiguration endpointConfiguration, string externalTimeoutManagerAddress) { }
    }
}
namespace NServiceBus_6.DeliveryConstraints
{
    public abstract class DeliveryConstraint
    {
        protected DeliveryConstraint() { }
    }
    public class static DeliveryConstraintContextExtensions
    {
        public static void AddDeliveryConstraint(this NServiceBus_6.Extensibility.ContextBag context, NServiceBus_6.DeliveryConstraints.DeliveryConstraint constraint) { }
        public static System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> GetDeliveryConstraints(this NServiceBus_6.Extensibility.ContextBag context) { }
        public static void RemoveDeliveryConstaint(this NServiceBus_6.Extensibility.ContextBag context, NServiceBus_6.DeliveryConstraints.DeliveryConstraint constraint) { }
        public static bool TryGetDeliveryConstraint<T>(this NServiceBus_6.Extensibility.ContextBag context, out T constraint)
            where T : NServiceBus_6.DeliveryConstraints.DeliveryConstraint { }
        public static bool TryRemoveDeliveryConstraint<T>(this NServiceBus_6.Extensibility.ContextBag context, out T constraint)
            where T : NServiceBus_6.DeliveryConstraints.DeliveryConstraint { }
    }
}
namespace NServiceBus_6.Extensibility
{
    public class ContextBag : NServiceBus_6.Extensibility.ReadOnlyContextBag
    {
        public ContextBag(NServiceBus_6.Extensibility.ContextBag parentBag = null) { }
        public T Get<T>() { }
        public T GetOrCreate<T>()
            where T :  class, new () { }
        public void Remove<T>() { }
        public void Remove(string key) { }
        public void Set<T>(T t) { }
        public void Set<T>(string key, T t) { }
        public bool TryGet<T>(out T result) { }
        public bool TryGet<T>(string key, out T result) { }
    }
    public abstract class ExtendableOptions
    {
        protected ExtendableOptions() { }
    }
    public class static ExtendableOptionsExtensions
    {
        public static NServiceBus_6.Extensibility.ContextBag GetExtensions(this NServiceBus_6.Extensibility.ExtendableOptions options) { }
    }
    public interface IExtendable
    {
        NServiceBus_6.Extensibility.ContextBag Extensions { get; }
    }
    public interface ReadOnlyContextBag
    {
        T Get<T>();
        bool TryGet<T>(out T result);
        bool TryGet<T>(string key, out T result);
    }
}
namespace NServiceBus_6.Faults
{
    public class DelayedRetryMessage
    {
        public DelayedRetryMessage(System.Collections.Generic.Dictionary<string, string> headers, byte[] body, System.Exception exception, int retryAttempt) { }
        public byte[] Body { get; }
        public System.Exception Exception { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public int RetryAttempt { get; }
    }
    public class ErrorsNotifications
    {
        [System.ObsoleteAttribute("Use `MessageHasBeenSentToDelayedRetries` instead. Will be removed in version 7.0." +
            "0.", true)]
        public System.EventHandler MessageHasBeenSentToSecondLevelRetries;
        [System.ObsoleteAttribute("Use `MessageHasFailedAnImmediateRetryAttempt` instead. Will be removed in version" +
            " 7.0.0.", true)]
        public System.EventHandler MessageHasFailedAFirstLevelRetryAttempt;
        public ErrorsNotifications() { }
        public event System.EventHandler<NServiceBus_6.Faults.DelayedRetryMessage> MessageHasBeenSentToDelayedRetries;
        public event System.EventHandler<NServiceBus_6.Faults.ImmediateRetryMessage> MessageHasFailedAnImmediateRetryAttempt;
        public event System.EventHandler<NServiceBus_6.Faults.FailedMessage> MessageSentToErrorQueue;
    }
    public class FailedMessage
    {
        [System.ObsoleteAttribute("Use `FailedMessage(string messageId, Dictionary<string, string> headers, byte[] b" +
            "ody, Exception exception, string errorQueue)` instead. The member currently thro" +
            "ws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public FailedMessage(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body, System.Exception exception) { }
        public FailedMessage(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body, System.Exception exception, string errorQueue) { }
        public byte[] Body { get; }
        public string ErrorQueue { get; }
        public System.Exception Exception { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
    }
    public class static FaultsHeaderKeys
    {
        public const string FailedQ = "NServiceBus.FailedQ";
    }
    [System.ObsoleteAttribute("First Level Retries has been renamed to Immediate Retries. Use `NServiceBus_6.Fau" +
        "lts.ImmediateRetryMessage` instead. Will be removed in version 7.0.0.", true)]
    public struct FirstLevelRetry { }
    [System.ObsoleteAttribute("IManageMessageFailures is no longer an extension point. To take control of the er" +
        "ror handling part of the message processing pipeline, review the Version 5 to 6 " +
        "upgrade guide for details. Will be removed in version 7.0.0.", true)]
    public interface IManageMessageFailures { }
    public class ImmediateRetryMessage
    {
        public ImmediateRetryMessage(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body, System.Exception exception, int retryAttempt) { }
        public byte[] Body { get; }
        public System.Exception Exception { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
        public int RetryAttempt { get; }
    }
    [System.ObsoleteAttribute("Second Level Retries has been renamed to Delayed Retries. Use `NServiceBus_6.Faul" +
        "ts.DelayedRetryMessage` instead. Will be removed in version 7.0.0.", true)]
    public struct SecondLevelRetry { }
}
namespace NServiceBus_6.Features
{
    public class Audit : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class AutoSubscribe : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("Use extensions provided by the TransportDefinition class instead. Will be removed" +
        " in version 7.0.0.", true)]
    public class ConfigureTransport
    {
        public ConfigureTransport() { }
    }
    [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
        "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
        " removed in version 8.0.0.", false)]
    public class CriticalTimeMonitoring : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class DataBus : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("Encryption is no longer enabled by default. Encryption gets enabled by calling co" +
        "nfiguration.RegisterEncryptionService or configuration.RijndaelEncryptionService" +
        ". Will be removed in version 7.0.0.", true)]
    public class Encryptor
    {
        public Encryptor() { }
    }
    public abstract class Feature
    {
        protected Feature() { }
        public bool IsActive { get; }
        public bool IsEnabledByDefault { get; }
        public string Name { get; }
        public string Version { get; }
        protected void Defaults(System.Action<NServiceBus_6.Settings.SettingsHolder> settings) { }
        protected void DependsOn<T>()
            where T : NServiceBus_6.Features.Feature { }
        protected void DependsOn(string featureTypeName) { }
        protected void DependsOnAtLeastOne(params System.Type[] features) { }
        protected void DependsOnAtLeastOne(params string[] featureNames) { }
        protected void DependsOnOptionally(string featureName) { }
        protected void DependsOnOptionally(System.Type featureType) { }
        protected void DependsOnOptionally<T>()
            where T : NServiceBus_6.Features.Feature { }
        protected void EnableByDefault() { }
        protected void Prerequisite(System.Func<NServiceBus_6.Features.FeatureConfigurationContext, bool> condition, string description) { }
        [System.ObsoleteAttribute("Use `FeatureConfigurationContext.RegisterStartupTask` instead. The member current" +
            "ly throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        protected void RegisterStartupTask<T>()
            where T : NServiceBus_6.Features.FeatureStartupTask { }
        protected internal abstract void Setup(NServiceBus_6.Features.FeatureConfigurationContext context);
        public override string ToString() { }
    }
    public class FeatureConfigurationContext
    {
        public NServiceBus_6.ObjectBuilder.IConfigureComponents Container { get; }
        public NServiceBus_6.Pipeline.PipelineSettings Pipeline { get; }
        public NServiceBus_6.Settings.ReadOnlySettings Settings { get; }
        [System.ObsoleteAttribute(@"The satellite's transaction mode needs to match the endpoint's transaction mode. As such the 'requiredTransportTransactionMode' parameter is redundant and should be removed. Use `AddSatelliteReceiver(string name, string transportAddress, PushRuntimeSettings runtimeSettings, Func<RecoverabilityConfig, ErrorContext, RecoverabilityAction> recoverabilityPolicy, Func<IBuilder, MessageContext, Task> onMessage)` instead. Will be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public void AddSatelliteReceiver(string name, string transportAddress, NServiceBus_6.TransportTransactionMode requiredTransportTransactionMode, NServiceBus_6.Transport.PushRuntimeSettings runtimeSettings, System.Func<NServiceBus_6.RecoverabilityConfig, NServiceBus_6.Transport.ErrorContext, NServiceBus_6.RecoverabilityAction> recoverabilityPolicy, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, NServiceBus_6.Transport.MessageContext, System.Threading.Tasks.Task> onMessage) { }
        public void AddSatelliteReceiver(string name, string transportAddress, NServiceBus_6.Transport.PushRuntimeSettings runtimeSettings, System.Func<NServiceBus_6.RecoverabilityConfig, NServiceBus_6.Transport.ErrorContext, NServiceBus_6.RecoverabilityAction> recoverabilityPolicy, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, NServiceBus_6.Transport.MessageContext, System.Threading.Tasks.Task> onMessage) { }
        public void RegisterStartupTask<TTask>(TTask startupTask)
            where TTask : NServiceBus_6.Features.FeatureStartupTask { }
        public void RegisterStartupTask<TTask>(System.Func<TTask> startupTaskFactory)
            where TTask : NServiceBus_6.Features.FeatureStartupTask { }
        public void RegisterStartupTask<TTask>(System.Func<NServiceBus_6.ObjectBuilder.IBuilder, TTask> startupTaskFactory)
            where TTask : NServiceBus_6.Features.FeatureStartupTask { }
    }
    public abstract class FeatureStartupTask
    {
        protected FeatureStartupTask() { }
        protected abstract System.Threading.Tasks.Task OnStart(NServiceBus_6.IMessageSession session);
        protected abstract System.Threading.Tasks.Task OnStop(NServiceBus_6.IMessageSession session);
    }
    public enum FeatureState
    {
        Disabled = 0,
        Enabled = 1,
        Active = 2,
        Deactivated = 3,
    }
    [System.ObsoleteAttribute("FirstLevelRetries is no longer a separate feature. Please use endpointConfigurati" +
        "on.Recoverability().Immediate(cfg => cfg.NumberOfRetries(0)); to disable Immedia" +
        "te Retries. Will be removed in version 7.0.0.", true)]
    public class FirstLevelRetries : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class ForwardReceivedMessages : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class InMemoryGatewayPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class InMemoryOutboxPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class InMemorySagaPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class InMemorySubscriptionPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class InMemoryTimeoutPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class MessageDrivenSubscriptions : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class MsmqSubscriptionPersistence : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class Outbox : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
        "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
        " removed in version 8.0.0.", false)]
    public class ReceiveStatisticsPerformanceCounters : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class Sagas : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    public class Scheduler : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("SecondLevelRetries is no longer a separate feature. Please use endpointConfigurat" +
        "ion.Recoverability().Delayed(cfg => cfg.NumberOfRetries(0)) to disable Delayed R" +
        "etries. Will be removed in version 7.0.0.", true)]
    public class SecondLevelRetries : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("Use the ConfigureSerialization Feature class instead. Use `ConfigureSerialization" +
        "` instead. Will be removed in version 7.0.0.", true)]
    public class static SerializationFeatureHelper { }
    public class static SettingsExtensions
    {
        public static NServiceBus_6.Settings.SettingsHolder EnableFeatureByDefault<T>(this NServiceBus_6.Settings.SettingsHolder settings)
            where T : NServiceBus_6.Features.Feature { }
        public static NServiceBus_6.Settings.SettingsHolder EnableFeatureByDefault(this NServiceBus_6.Settings.SettingsHolder settings, System.Type featureType) { }
        public static bool IsFeatureActive(this NServiceBus_6.Settings.ReadOnlySettings settings, System.Type featureType) { }
        public static bool IsFeatureEnabled(this NServiceBus_6.Settings.ReadOnlySettings settings, System.Type featureType) { }
    }
    [System.ObsoleteAttribute("Performance counters have been released as a separate package: NServiceBus_6.Metr" +
        "ics.PerformanceCounters. Will be treated as an error from version 7.0.0. Will be" +
        " removed in version 8.0.0.", false)]
    public class SLAMonitoring : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("No longer used, safe to remove. Will be removed in version 7.0.0.", true)]
    public class StorageDrivenPublishing
    {
        public StorageDrivenPublishing() { }
    }
    public class TimeoutManager : NServiceBus_6.Features.Feature
    {
        protected internal override void Setup(NServiceBus_6.Features.FeatureConfigurationContext context) { }
    }
    [System.ObsoleteAttribute("No longer used, safe to remove. Will be removed in version 7.0.0.", true)]
    public class TimeoutManagerBasedDeferral
    {
        public TimeoutManagerBasedDeferral() { }
    }
}
namespace NServiceBus_6.Gateway.Deduplication
{
    public interface IDeduplicateMessages
    {
        System.Threading.Tasks.Task<bool> DeduplicateMessage(string clientId, System.DateTime timeReceived, NServiceBus_6.Extensibility.ContextBag context);
    }
}
namespace NServiceBus_6.Hosting.Helpers
{
    public class AssemblyScanner
    {
        public AssemblyScanner() { }
        public AssemblyScanner(string baseDirectoryToScan) { }
        [System.ObsoleteAttribute("This method is no longer required since deep scanning of assemblies is done to de" +
            "tect an NServiceBus reference. The member currently throws a NotImplementedExcep" +
            "tion. Will be removed in version 7.0.0.", true)]
        public System.Collections.Generic.List<System.Reflection.Assembly> MustReferenceAtLeastOneAssembly { get; }
        public bool ScanAppDomainAssemblies { get; set; }
        public bool ThrowExceptions { get; set; }
        public NServiceBus_6.Hosting.Helpers.AssemblyScannerResults GetScannableAssemblies() { }
    }
    public class AssemblyScannerResults
    {
        public AssemblyScannerResults() { }
        public System.Collections.Generic.List<System.Reflection.Assembly> Assemblies { get; }
        public bool ErrorsThrownDuringScanning { get; }
        public System.Collections.Generic.List<NServiceBus_6.Hosting.Helpers.SkippedFile> SkippedFiles { get; }
        public System.Collections.Generic.List<System.Type> Types { get; }
    }
    public class SkippedFile
    {
        public string FilePath { get; }
        public string SkipReason { get; }
    }
}
namespace NServiceBus_6.Hosting
{
    public class HostInformation
    {
        public HostInformation(System.Guid hostId, string displayName) { }
        public HostInformation(System.Guid hostId, string displayName, System.Collections.Generic.Dictionary<string, string> properties) { }
        public string DisplayName { get; }
        public System.Guid HostId { get; }
        public System.Collections.Generic.Dictionary<string, string> Properties { get; }
    }
}
namespace NServiceBus_6.InMemory.Outbox
{
    public class static InMemoryOutboxSettingsExtensions
    {
        public static NServiceBus_6.Outbox.OutboxSettings TimeToKeepDeduplicationData(this NServiceBus_6.Outbox.OutboxSettings settings, System.TimeSpan time) { }
    }
}
namespace NServiceBus_6.Installation
{
    public interface INeedToInstallSomething
    {
        System.Threading.Tasks.Task Install(string identity);
    }
}
namespace NServiceBus_6.Logging
{
    public class DefaultFactory : NServiceBus_6.Logging.LoggingFactoryDefinition
    {
        public DefaultFactory() { }
        public void Directory(string directory) { }
        protected internal override NServiceBus_6.Logging.ILoggerFactory GetLoggingFactory() { }
        public void Level(NServiceBus_6.Logging.LogLevel level) { }
    }
    public interface ILog
    {
        bool IsDebugEnabled { get; }
        bool IsErrorEnabled { get; }
        bool IsFatalEnabled { get; }
        bool IsInfoEnabled { get; }
        bool IsWarnEnabled { get; }
        void Debug(string message);
        void Debug(string message, System.Exception exception);
        void DebugFormat(string format, params object[] args);
        void Error(string message);
        void Error(string message, System.Exception exception);
        void ErrorFormat(string format, params object[] args);
        void Fatal(string message);
        void Fatal(string message, System.Exception exception);
        void FatalFormat(string format, params object[] args);
        void Info(string message);
        void Info(string message, System.Exception exception);
        void InfoFormat(string format, params object[] args);
        void Warn(string message);
        void Warn(string message, System.Exception exception);
        void WarnFormat(string format, params object[] args);
    }
    public interface ILoggerFactory
    {
        NServiceBus_6.Logging.ILog GetLogger(System.Type type);
        NServiceBus_6.Logging.ILog GetLogger(string name);
    }
    public abstract class LoggingFactoryDefinition
    {
        protected LoggingFactoryDefinition() { }
        protected internal abstract NServiceBus_6.Logging.ILoggerFactory GetLoggingFactory();
    }
    public enum LogLevel
    {
        Debug = 0,
        Info = 1,
        Warn = 2,
        Error = 3,
        Fatal = 4,
    }
    public class static LogManager
    {
        public static NServiceBus_6.Logging.ILog GetLogger<T>() { }
        public static NServiceBus_6.Logging.ILog GetLogger(System.Type type) { }
        public static NServiceBus_6.Logging.ILog GetLogger(string name) { }
        public static T Use<T>()
            where T : NServiceBus_6.Logging.LoggingFactoryDefinition, new () { }
        public static void UseFactory(NServiceBus_6.Logging.ILoggerFactory loggerFactory) { }
    }
}
namespace NServiceBus_6.MessageInterfaces
{
    public interface IMessageMapper : NServiceBus_6.IMessageCreator
    {
        System.Type GetMappedTypeFor(System.Type t);
        System.Type GetMappedTypeFor(string typeName);
        void Initialize(System.Collections.Generic.IEnumerable<System.Type> types);
    }
}
namespace NServiceBus_6.MessageInterfaces.MessageMapper.Reflection
{
    public class MessageMapper : NServiceBus_6.IMessageCreator, NServiceBus_6.MessageInterfaces.IMessageMapper
    {
        public MessageMapper() { }
        public T CreateInstance<T>(System.Action<T> action) { }
        public T CreateInstance<T>() { }
        public object CreateInstance(System.Type t) { }
        public System.Type GetMappedTypeFor(System.Type t) { }
        public System.Type GetMappedTypeFor(string typeName) { }
        public void Initialize(System.Collections.Generic.IEnumerable<System.Type> types) { }
    }
}
namespace NServiceBus_6.MessageMutator
{
    [System.ObsoleteAttribute("Have the mutator implement both IMutateOutgoingMessages and IMutateIncomingMessag" +
        "es. Will be removed in version 7.0.0.", true)]
    public interface IMessageMutator { }
    public interface IMutateIncomingMessages
    {
        System.Threading.Tasks.Task MutateIncoming(NServiceBus_6.MessageMutator.MutateIncomingMessageContext context);
    }
    public interface IMutateIncomingTransportMessages
    {
        System.Threading.Tasks.Task MutateIncoming(NServiceBus_6.MessageMutator.MutateIncomingTransportMessageContext context);
    }
    public interface IMutateOutgoingMessages
    {
        System.Threading.Tasks.Task MutateOutgoing(NServiceBus_6.MessageMutator.MutateOutgoingMessageContext context);
    }
    public interface IMutateOutgoingTransportMessages
    {
        System.Threading.Tasks.Task MutateOutgoing(NServiceBus_6.MessageMutator.MutateOutgoingTransportMessageContext context);
    }
    [System.ObsoleteAttribute("Have the mutator implement both IMutateIncomingTransportMessages and IMutateOutgo" +
        "ingTransportMessages. Will be removed in version 7.0.0.", true)]
    public interface IMutateTransportMessages : NServiceBus_6.MessageMutator.IMutateIncomingTransportMessages, NServiceBus_6.MessageMutator.IMutateOutgoingTransportMessages { }
    public class MutateIncomingMessageContext
    {
        public MutateIncomingMessageContext(object message, System.Collections.Generic.Dictionary<string, string> headers) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public object Message { get; set; }
    }
    public class MutateIncomingTransportMessageContext
    {
        public MutateIncomingTransportMessageContext(byte[] body, System.Collections.Generic.Dictionary<string, string> headers) { }
        public byte[] Body { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
    }
    public class MutateOutgoingMessageContext
    {
        public MutateOutgoingMessageContext(object outgoingMessage, System.Collections.Generic.Dictionary<string, string> outgoingHeaders, object incomingMessage, System.Collections.Generic.IReadOnlyDictionary<string, string> incomingHeaders) { }
        public System.Collections.Generic.Dictionary<string, string> OutgoingHeaders { get; }
        public object OutgoingMessage { get; set; }
        public bool TryGetIncomingHeaders(out System.Collections.Generic.IReadOnlyDictionary<, > incomingHeaders) { }
        public bool TryGetIncomingMessage(out object incomingMessage) { }
    }
    public class MutateOutgoingTransportMessageContext
    {
        public MutateOutgoingTransportMessageContext(byte[] outgoingBody, object outgoingMessage, System.Collections.Generic.Dictionary<string, string> outgoingHeaders, object incomingMessage, System.Collections.Generic.IReadOnlyDictionary<string, string> incomingHeaders) { }
        public byte[] OutgoingBody { get; set; }
        public System.Collections.Generic.Dictionary<string, string> OutgoingHeaders { get; }
        public object OutgoingMessage { get; }
        public bool TryGetIncomingHeaders(out System.Collections.Generic.IReadOnlyDictionary<, > incomingHeaders) { }
        public bool TryGetIncomingMessage(out object incomingMessage) { }
    }
    public class static MutatorRegistrationExtensions
    {
        public static void RegisterMessageMutator(this NServiceBus_6.EndpointConfiguration endpointConfiguration, object messageMutator) { }
    }
}
namespace NServiceBus_6.ObjectBuilder.Common
{
    public interface IContainer : System.IDisposable
    {
        object Build(System.Type typeToBuild);
        System.Collections.Generic.IEnumerable<object> BuildAll(System.Type typeToBuild);
        NServiceBus_6.ObjectBuilder.Common.IContainer BuildChildContainer();
        void Configure(System.Type component, NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        void Configure<T>(System.Func<T> component, NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        bool HasComponent(System.Type componentType);
        void RegisterSingleton(System.Type lookupType, object instance);
        void Release(object instance);
    }
}
namespace NServiceBus_6.ObjectBuilder
{
    public interface IBuilder : System.IDisposable
    {
        object Build(System.Type typeToBuild);
        T Build<T>();
        System.Collections.Generic.IEnumerable<T> BuildAll<T>();
        System.Collections.Generic.IEnumerable<object> BuildAll(System.Type typeToBuild);
        void BuildAndDispatch(System.Type typeToBuild, System.Action<object> action);
        NServiceBus_6.ObjectBuilder.IBuilder CreateChildBuilder();
        void Release(object instance);
    }
    [System.ObsoleteAttribute("Setting property values explicitly is no longer supported via this API. Use `.Con" +
        "figureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full contro" +
        "l over handler creation. Will be removed in version 7.0.0.", true)]
    public interface IComponentConfig { }
    [System.ObsoleteAttribute("Setting property values explicitly is no longer supported via this API. Use `.Con" +
        "figureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full contro" +
        "l over handler creation. Will be removed in version 7.0.0.", true)]
    public interface IComponentConfig<T> { }
    [System.ObsoleteAttribute("Setting property values explicitly is no longer supported via this API. Use `.Con" +
        "figureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full contro" +
        "l over handler creation. Will be removed in version 7.0.0.", true)]
    public class static IConfigureComponentObsoleteExtensions
    {
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus_6.ObjectBuilder.IConfigureComponents ConfigureProperty<T>(this NServiceBus_6.ObjectBuilder.IConfigureComponents config, System.Linq.Expressions.Expression<System.Func<T, object>> property, object value) { }
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus_6.ObjectBuilder.IConfigureComponents ConfigureProperty<T>(this NServiceBus_6.ObjectBuilder.IConfigureComponents config, string propertyName, object value) { }
    }
    public interface IConfigureComponents
    {
        void ConfigureComponent(System.Type concreteComponent, NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        void ConfigureComponent<T>(NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        void ConfigureComponent<T>(System.Func<T> componentFactory, NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        void ConfigureComponent<T>(System.Func<NServiceBus_6.ObjectBuilder.IBuilder, T> componentFactory, NServiceBus_6.DependencyLifecycle dependencyLifecycle);
        bool HasComponent<T>();
        bool HasComponent(System.Type componentType);
        void RegisterSingleton(System.Type lookupType, object instance);
        void RegisterSingleton<T>(T instance);
    }
}
namespace NServiceBus_6.Outbox
{
    public interface IOutboxStorage
    {
        System.Threading.Tasks.Task<NServiceBus_6.Outbox.OutboxTransaction> BeginTransaction(NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task<NServiceBus_6.Outbox.OutboxMessage> Get(string messageId, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task SetAsDispatched(string messageId, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task Store(NServiceBus_6.Outbox.OutboxMessage message, NServiceBus_6.Outbox.OutboxTransaction transaction, NServiceBus_6.Extensibility.ContextBag context);
    }
    public class OutboxMessage
    {
        public OutboxMessage(string messageId, NServiceBus_6.Outbox.TransportOperation[] operations) { }
        public string MessageId { get; }
        public NServiceBus_6.Outbox.TransportOperation[] TransportOperations { get; }
    }
    public class OutboxSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        [System.ObsoleteAttribute("Use `InMemoryOutboxSettingsExtensions.TimeToKeepDeduplicationData(TimeSpan time)`" +
            " instead. The member currently throws a NotImplementedException. Will be removed" +
            " in version 7.0.0.", true)]
        public void TimeToKeepDeduplicationData(System.TimeSpan time) { }
    }
    public interface OutboxTransaction : System.IDisposable
    {
        System.Threading.Tasks.Task Commit();
    }
    public class TransportOperation
    {
        public TransportOperation(string messageId, System.Collections.Generic.Dictionary<string, string> options, byte[] body, System.Collections.Generic.Dictionary<string, string> headers) { }
        public byte[] Body { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
        public System.Collections.Generic.Dictionary<string, string> Options { get; }
    }
}
namespace NServiceBus_6.Performance.TimeToBeReceived
{
    public class DiscardIfNotReceivedBefore : NServiceBus_6.DeliveryConstraints.DeliveryConstraint
    {
        public DiscardIfNotReceivedBefore(System.TimeSpan maxTime) { }
        public System.TimeSpan MaxTime { get; }
    }
}
namespace NServiceBus_6.Persistence
{
    public interface CompletableSynchronizedStorageSession : NServiceBus_6.Persistence.SynchronizedStorageSession, System.IDisposable
    {
        System.Threading.Tasks.Task CompleteAsync();
    }
    public interface ISynchronizedStorage
    {
        System.Threading.Tasks.Task<NServiceBus_6.Persistence.CompletableSynchronizedStorageSession> OpenSession(NServiceBus_6.Extensibility.ContextBag contextBag);
    }
    public interface ISynchronizedStorageAdapter
    {
        System.Threading.Tasks.Task<NServiceBus_6.Persistence.CompletableSynchronizedStorageSession> TryAdapt(NServiceBus_6.Outbox.OutboxTransaction transaction, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task<NServiceBus_6.Persistence.CompletableSynchronizedStorageSession> TryAdapt(NServiceBus_6.Transport.TransportTransaction transportTransaction, NServiceBus_6.Extensibility.ContextBag context);
    }
    public abstract class PersistenceDefinition
    {
        protected PersistenceDefinition() { }
        protected void Defaults(System.Action<NServiceBus_6.Settings.SettingsHolder> action) { }
        [System.ObsoleteAttribute("Use `HasSupportFor<T>()` instead. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 7.0.0.", true)]
        public bool HasSupportFor(NServiceBus_6.Persistence.Storage storage) { }
        public bool HasSupportFor<T>()
            where T : NServiceBus_6.Persistence.StorageType { }
        public bool HasSupportFor(System.Type storageType) { }
        protected void Supports<T>(System.Action<NServiceBus_6.Settings.SettingsHolder> action)
            where T : NServiceBus_6.Persistence.StorageType { }
        [System.ObsoleteAttribute("Use `Supports<T>()` instead. The member currently throws a NotImplementedExceptio" +
            "n. Will be removed in version 7.0.0.", true)]
        protected void Supports(NServiceBus_6.Persistence.Storage storage, System.Action<NServiceBus_6.Settings.SettingsHolder> action) { }
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Persistence.StorageType` instead. Will be removed in version 7" +
        ".0.0.", true)]
    public enum Storage
    {
        Timeouts = 1,
        Subscriptions = 2,
        Sagas = 3,
        GatewayDeduplication = 4,
        Outbox = 5,
    }
    public abstract class StorageType
    {
        public override string ToString() { }
        public sealed class GatewayDeduplication : NServiceBus_6.Persistence.StorageType { }
        public sealed class Outbox : NServiceBus_6.Persistence.StorageType { }
        public sealed class Sagas : NServiceBus_6.Persistence.StorageType { }
        public sealed class Subscriptions : NServiceBus_6.Persistence.StorageType { }
        public sealed class Timeouts : NServiceBus_6.Persistence.StorageType { }
    }
    public interface SynchronizedStorageSession { }
}
namespace NServiceBus_6.Persistence.Legacy
{
    public class MsmqPersistence : NServiceBus_6.Persistence.PersistenceDefinition { }
    public class static MsmqSubscriptionStorageConfigurationExtensions
    {
        public static void SubscriptionQueue(this NServiceBus_6.PersistenceExtensions<NServiceBus_6.Persistence.Legacy.MsmqPersistence> persistenceExtensions, string queue) { }
    }
}
namespace NServiceBus_6.Pipeline
{
    public abstract class Behavior<TContext> : NServiceBus_6.Pipeline.IBehavior, NServiceBus_6.Pipeline.IBehavior<TContext, TContext>
        where TContext : NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected Behavior() { }
        public System.Threading.Tasks.Task Invoke(TContext context, System.Func<TContext, System.Threading.Tasks.Task> next) { }
        public abstract System.Threading.Tasks.Task Invoke(TContext context, System.Func<System.Threading.Tasks.Task> next);
    }
    public abstract class ForkConnector<TFromContext, TForkContext> : NServiceBus_6.Pipeline.Behavior<TFromContext>, NServiceBus_6.Pipeline.IBehavior, NServiceBus_6.Pipeline.IBehavior<TFromContext, TFromContext>
        where TFromContext : NServiceBus_6.Pipeline.IBehaviorContext
        where TForkContext : NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected ForkConnector() { }
        public abstract System.Threading.Tasks.Task Invoke(TFromContext context, System.Func<System.Threading.Tasks.Task> next, System.Func<TForkContext, System.Threading.Tasks.Task> fork);
        public virtual System.Threading.Tasks.Task Invoke(TFromContext context, System.Func<System.Threading.Tasks.Task> next) { }
    }
    public interface IAuditContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        string AuditAddress { get; }
        NServiceBus_6.Transport.OutgoingMessage Message { get; }
        void AddAuditData(string key, string value);
    }
    public interface IBatchDispatchContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Transport.TransportOperation> Operations { get; }
    }
    public interface IBehavior { }
    [System.ObsoleteAttribute("Use `Behavior<T>` instead. Will be removed in version 7.0.0.", true)]
    public interface IBehavior<in TContext> { }
    public interface IBehavior<in TInContext, out TOutContext> : NServiceBus_6.Pipeline.IBehavior
        where in TInContext : NServiceBus_6.Pipeline.IBehaviorContext
        where out TOutContext : NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Threading.Tasks.Task Invoke(TInContext context, System.Func<TOutContext, System.Threading.Tasks.Task> next);
    }
    public interface IBehaviorContext : NServiceBus_6.Extensibility.IExtendable
    {
        NServiceBus_6.ObjectBuilder.IBuilder Builder { get; }
    }
    public interface IDispatchContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Collections.Generic.IEnumerable<NServiceBus_6.Transport.TransportOperation> Operations { get; }
    }
    public interface IForwardingContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        string Address { get; }
        NServiceBus_6.Transport.OutgoingMessage Message { get; }
    }
    public interface IIncomingContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext { }
    public interface IIncomingLogicalMessageContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext
    {
        System.Collections.Generic.Dictionary<string, string> Headers { get; }
        NServiceBus_6.Pipeline.LogicalMessage Message { get; }
        bool MessageHandled { get; set; }
        void UpdateMessageInstance(object newInstance);
    }
    public interface IIncomingPhysicalMessageContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext
    {
        NServiceBus_6.Transport.IncomingMessage Message { get; }
        void UpdateMessage(byte[] body);
    }
    public interface IInvokeHandlerContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageHandlerContext, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext
    {
        bool HandleCurrentMessageLaterWasCalled { get; }
        bool HandlerInvocationAborted { get; }
        System.Collections.Generic.Dictionary<string, string> Headers { get; }
        object MessageBeingHandled { get; }
        NServiceBus_6.Pipeline.MessageHandler MessageHandler { get; }
        NServiceBus_6.Unicast.Messages.MessageMetadata MessageMetadata { get; }
    }
    public interface IOutgoingContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Collections.Generic.Dictionary<string, string> Headers { get; }
        string MessageId { get; }
    }
    public interface IOutgoingLogicalMessageContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; }
        System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; }
        void UpdateMessage(object newInstance);
    }
    public interface IOutgoingPhysicalMessageContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        byte[] Body { get; }
        System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; }
        void UpdateMessage(byte[] body);
    }
    public interface IOutgoingPublishContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; }
    }
    public interface IOutgoingReplyContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; }
    }
    public interface IOutgoingSendContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; }
    }
    public interface IRoutingContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        NServiceBus_6.Transport.OutgoingMessage Message { get; }
        System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; set; }
    }
    public interface ISubscribeContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Type EventType { get; }
    }
    public interface ITransportReceiveContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        NServiceBus_6.Transport.IncomingMessage Message { get; }
        void AbortReceiveOperation();
    }
    public interface IUnsubscribeContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        System.Type EventType { get; }
    }
    public class LogicalMessage
    {
        public LogicalMessage(NServiceBus_6.Unicast.Messages.MessageMetadata metadata, object message) { }
        public object Instance { get; }
        public System.Type MessageType { get; }
        public NServiceBus_6.Unicast.Messages.MessageMetadata Metadata { get; }
        [System.ObsoleteAttribute("Use `IIncomingLogicalMessageContext.UpdateMessageInstance(object newInstance)` in" +
            "stead. The member currently throws a NotImplementedException. Will be removed in" +
            " version 7.0.0.", true)]
        public void UpdateMessageInstance(object newInstance) { }
    }
    public class LogicalMessageFactory
    {
        public LogicalMessageFactory(NServiceBus_6.Unicast.Messages.MessageMetadataRegistry messageMetadataRegistry, NServiceBus_6.MessageInterfaces.IMessageMapper messageMapper) { }
        public NServiceBus_6.Pipeline.LogicalMessage Create(object message) { }
        public NServiceBus_6.Pipeline.LogicalMessage Create(System.Type messageType, object message) { }
    }
    public class MessageHandler
    {
        public MessageHandler(System.Func<object, object, NServiceBus_6.IMessageHandlerContext, System.Threading.Tasks.Task> invocation, System.Type handlerType) { }
        public System.Type HandlerType { get; }
        public object Instance { get; set; }
        public System.Threading.Tasks.Task Invoke(object message, NServiceBus_6.IMessageHandlerContext handlerContext) { }
    }
    public class OutgoingLogicalMessage
    {
        public OutgoingLogicalMessage(System.Type messageType, object message) { }
        public object Instance { get; }
        public System.Type MessageType { get; }
    }
    [System.ObsoleteAttribute("The pipeline context is no longer avaliable via dependency injection. Use a custo" +
        "m behavior as described in the version 6 upgrade guide. Will be removed in versi" +
        "on 7.0.0.", true)]
    public class PipelineExecutor
    {
        public PipelineExecutor() { }
    }
    public class PipelineSettings : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public void Register(System.Type behavior, string description) { }
        public void Register(string stepId, System.Type behavior, string description) { }
        public void Register<T>(System.Func<NServiceBus_6.ObjectBuilder.IBuilder, T> factoryMethod, string description)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        public void Register<T>(string stepId, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, T> factoryMethod, string description)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        public void Register<T>(T behavior, string description)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        public void Register<T>(string stepId, T behavior, string description)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        public void Register<TRegisterStep>()
            where TRegisterStep : NServiceBus_6.Pipeline.RegisterStep, new () { }
        public void Register(NServiceBus_6.Pipeline.RegisterStep registration) { }
        public void Remove(string stepId) { }
        [System.ObsoleteAttribute("Use `Remove(string stepId)` instead. The member currently throws a NotImplemented" +
            "Exception. Will be removed in version 7.0.0.", true)]
        public void Remove(NServiceBus_6.Pipeline.WellKnownStep wellKnownStep) { }
        public void Replace(string stepId, System.Type newBehavior, string description = null) { }
        public void Replace<T>(string stepId, T newBehavior, string description = null)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        public void Replace<T>(string stepId, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, T> factoryMethod, string description = null)
            where T : NServiceBus_6.Pipeline.IBehavior { }
        [System.ObsoleteAttribute("Use `Replace(string stepId, Type newBehavior, string description)` instead. The m" +
            "ember currently throws a NotImplementedException. Will be removed in version 7.0" +
            ".0.", true)]
        public void Replace(NServiceBus_6.Pipeline.WellKnownStep wellKnownStep, System.Type newBehavior, string description = null) { }
    }
    public abstract class PipelineTerminator<T> : NServiceBus_6.Pipeline.StageConnector<T, NServiceBus_6.Pipeline.PipelineTerminator<T>.ITerminatingContext>
        where T : NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected PipelineTerminator() { }
        public virtual System.Threading.Tasks.Task Invoke(T context, System.Func<NServiceBus_6.Pipeline.PipelineTerminator<T>.ITerminatingContext, System.Threading.Tasks.Task> next) { }
        protected abstract System.Threading.Tasks.Task Terminate(T context);
        public interface ITerminatingContext<T> : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
            where T : NServiceBus_6.Pipeline.IBehaviorContext { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{StepId}({BehaviorType.FullName}) - {Description}")]
    public abstract class RegisterStep
    {
        protected RegisterStep(string stepId, System.Type behavior, string description, System.Func<NServiceBus_6.ObjectBuilder.IBuilder, NServiceBus_6.Pipeline.IBehavior> factoryMethod = null) { }
        public System.Type BehaviorType { get; }
        public string Description { get; }
        public string StepId { get; }
        public void InsertAfter(string id) { }
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. The member currently throws a Not" +
            "ImplementedException. Will be removed in version 7.0.0.", true)]
        public void InsertAfter(NServiceBus_6.Pipeline.WellKnownStep step) { }
        public void InsertAfterIfExists(string id) { }
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. The member currently throws a Not" +
            "ImplementedException. Will be removed in version 7.0.0.", true)]
        public void InsertAfterIfExists(NServiceBus_6.Pipeline.WellKnownStep step) { }
        public void InsertBefore(string id) { }
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. The member currently throws a Not" +
            "ImplementedException. Will be removed in version 7.0.0.", true)]
        public void InsertBefore(NServiceBus_6.Pipeline.WellKnownStep step) { }
        public void InsertBeforeIfExists(string id) { }
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. The member currently throws a Not" +
            "ImplementedException. Will be removed in version 7.0.0.", true)]
        public void InsertBeforeIfExists(NServiceBus_6.Pipeline.WellKnownStep step) { }
        public virtual bool IsEnabled(NServiceBus_6.Settings.ReadOnlySettings settings) { }
    }
    public abstract class StageConnector<TFromContext, TToContext> : NServiceBus_6.Pipeline.IBehavior, NServiceBus_6.Pipeline.IBehavior<TFromContext, TToContext>
        where TFromContext : NServiceBus_6.Pipeline.IBehaviorContext
        where TToContext : NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected StageConnector() { }
        public abstract System.Threading.Tasks.Task Invoke(TFromContext context, System.Func<TToContext, System.Threading.Tasks.Task> stage);
    }
    public abstract class StageForkConnector<TFromContext, TToContext, TForkContext> : NServiceBus_6.Pipeline.IBehavior, NServiceBus_6.Pipeline.IBehavior<TFromContext, TToContext>
        where TFromContext : NServiceBus_6.Pipeline.IBehaviorContext
        where TToContext : NServiceBus_6.Pipeline.IBehaviorContext
        where TForkContext : NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected StageForkConnector() { }
        public System.Threading.Tasks.Task Invoke(TFromContext context, System.Func<TToContext, System.Threading.Tasks.Task> next) { }
        public abstract System.Threading.Tasks.Task Invoke(TFromContext context, System.Func<TToContext, System.Threading.Tasks.Task> stage, System.Func<TForkContext, System.Threading.Tasks.Task> fork);
    }
    public class static TransportMessageContextExtensions
    {
        public static bool TryGetIncomingPhysicalMessage(this NServiceBus_6.Pipeline.IOutgoingReplyContext context, out NServiceBus_6.Transport.IncomingMessage message) { }
        public static bool TryGetIncomingPhysicalMessage(this NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext context, out NServiceBus_6.Transport.IncomingMessage message) { }
        public static bool TryGetIncomingPhysicalMessage(this NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext context, out NServiceBus_6.Transport.IncomingMessage message) { }
    }
    [System.ObsoleteAttribute("WellKnownSteps are obsolete. Use an appropriate pipeline stage for your behavior " +
        "instead. Consult the pipeline extension documentation for more information. Will" +
        " be removed in version 7.0.0.", true)]
    public class WellKnownStep
    {
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep AuditProcessedMessage;
        [System.ObsoleteAttribute("The child container creation is now an integral part of the pipeline invocation a" +
            "nd no longer a separate behavior. Will be removed in version 7.0.0.", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep CreateChildContainer;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep DispatchMessageToTransport;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep EnforcePublishBestPractices;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep EnforceReplyBestPractices;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep EnforceSendBestPractices;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep EnforceSubscribeBestPractices;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep EnforceUnsubscribeBestPractices;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep ExecuteUnitOfWork;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static NServiceBus_6.Pipeline.WellKnownStep HostInformation;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep InvokeHandlers;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep InvokeSaga;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep MutateIncomingMessages;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep MutateIncomingTransportMessage;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep MutateOutgoingMessages;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static readonly NServiceBus_6.Pipeline.WellKnownStep MutateOutgoingTransportMessage;
        [System.ObsoleteAttribute("Use an appropriate pipeline stage for your behavior instead. Consult the pipeline" +
            " extension documentation for more information. Will be removed in version 7.0.0." +
            "", true)]
        public static NServiceBus_6.Pipeline.WellKnownStep ProcessingStatistics;
        public WellKnownStep() { }
    }
}
namespace NServiceBus_6.Pipeline.Contexts
{
    [System.ObsoleteAttribute("Use `OutgoingLogicalMessage` instead. Will be removed in version 7.0.0.", true)]
    public class OutgoingContext
    {
        public OutgoingContext() { }
    }
}
namespace NServiceBus_6.Routing
{
    public abstract class AddressTag
    {
        protected AddressTag() { }
    }
    public class DistributionContext : NServiceBus_6.Extensibility.IExtendable
    {
        public DistributionContext(string[] receiverAddresses, NServiceBus_6.Pipeline.OutgoingLogicalMessage message, string messageId, System.Collections.Generic.Dictionary<string, string> headers, System.Func<NServiceBus_6.Routing.EndpointInstance, string> addressTranslation, NServiceBus_6.Extensibility.ContextBag extensions) { }
        public NServiceBus_6.Extensibility.ContextBag Extensions { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; }
        public string MessageId { get; }
        public string[] ReceiverAddresses { get; }
        public string ToTransportAddress(NServiceBus_6.Routing.EndpointInstance endpointInstance) { }
    }
    public abstract class DistributionStrategy
    {
        protected DistributionStrategy(string endpoint, NServiceBus_6.DistributionStrategyScope scope) { }
        public string Endpoint { get; }
        public NServiceBus_6.DistributionStrategyScope Scope { get; }
        public virtual string SelectDestination(NServiceBus_6.Routing.DistributionContext context) { }
        public abstract string SelectReceiver(string[] receiverAddresses);
    }
    public sealed class EndpointInstance
    {
        public EndpointInstance(string endpoint, string discriminator = null, System.Collections.Generic.IReadOnlyDictionary<string, string> properties = null) { }
        public string Discriminator { get; }
        public string Endpoint { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> Properties { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public NServiceBus_6.Routing.EndpointInstance SetProperty(string key, string value) { }
        public override string ToString() { }
    }
    public class EndpointInstances
    {
        public EndpointInstances() { }
        public void AddOrReplaceInstances(string sourceKey, System.Collections.Generic.IList<NServiceBus_6.Routing.EndpointInstance> endpointInstances) { }
        public System.Collections.Generic.IEnumerable<NServiceBus_6.Routing.EndpointInstance> FindInstances(string endpoint) { }
    }
    public interface IMessageDrivenSubscriptionTransport { }
    public class MulticastAddressTag : NServiceBus_6.Routing.AddressTag
    {
        public MulticastAddressTag(System.Type messageType) { }
        public System.Type MessageType { get; }
    }
    public class MulticastRoutingStrategy : NServiceBus_6.Routing.RoutingStrategy
    {
        public MulticastRoutingStrategy(System.Type messageType) { }
        public override NServiceBus_6.Routing.AddressTag Apply(System.Collections.Generic.Dictionary<string, string> headers) { }
    }
    public class RouteTableEntry
    {
        public RouteTableEntry(System.Type messageType, NServiceBus_6.Routing.UnicastRoute route) { }
        public System.Type MessageType { get; }
        public NServiceBus_6.Routing.UnicastRoute Route { get; }
    }
    public abstract class RoutingStrategy
    {
        protected RoutingStrategy() { }
        public abstract NServiceBus_6.Routing.AddressTag Apply(System.Collections.Generic.Dictionary<string, string> headers);
    }
    public class SingleInstanceRoundRobinDistributionStrategy : NServiceBus_6.Routing.DistributionStrategy
    {
        public SingleInstanceRoundRobinDistributionStrategy(string endpoint, NServiceBus_6.DistributionStrategyScope scope) { }
        public override string SelectReceiver(string[] receiverAddresses) { }
    }
    public class UnicastAddressTag : NServiceBus_6.Routing.AddressTag
    {
        public UnicastAddressTag(string destination) { }
        public string Destination { get; }
    }
    public class UnicastRoute
    {
        public string Endpoint { get; }
        public NServiceBus_6.Routing.EndpointInstance Instance { get; }
        public string PhysicalAddress { get; }
        public static NServiceBus_6.Routing.UnicastRoute CreateFromEndpointInstance(NServiceBus_6.Routing.EndpointInstance instance) { }
        public static NServiceBus_6.Routing.UnicastRoute CreateFromEndpointName(string endpoint) { }
        public static NServiceBus_6.Routing.UnicastRoute CreateFromPhysicalAddress(string physicalAddress) { }
        public override string ToString() { }
    }
    public class UnicastRoutingStrategy : NServiceBus_6.Routing.RoutingStrategy
    {
        public UnicastRoutingStrategy(string destination) { }
        public override NServiceBus_6.Routing.AddressTag Apply(System.Collections.Generic.Dictionary<string, string> headers) { }
    }
    public class UnicastRoutingTable
    {
        public UnicastRoutingTable() { }
        public void AddOrReplaceRoutes(string sourceKey, System.Collections.Generic.IList<NServiceBus_6.Routing.RouteTableEntry> entries) { }
    }
}
namespace NServiceBus_6.Routing.Legacy
{
    public class static ConfigureMSMQDistributor
    {
        public static void EnlistWithLegacyMSMQDistributor(this NServiceBus_6.EndpointConfiguration config, string masterNodeAddress, string masterNodeControlAddress, int capacity) { }
    }
}
namespace NServiceBus_6.Routing.MessageDrivenSubscriptions
{
    public class PublisherAddress
    {
        public static NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherAddress CreateFromEndpointInstances(params NServiceBus_6.Routing.EndpointInstance[] instances) { }
        public static NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherAddress CreateFromEndpointName(string endpoint) { }
        public static NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherAddress CreateFromPhysicalAddresses(params string[] addresses) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class Publishers
    {
        public Publishers() { }
        public void AddOrReplacePublishers(string sourceKey, System.Collections.Generic.IList<NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherTableEntry> entries) { }
    }
    public class PublisherTableEntry
    {
        public PublisherTableEntry(System.Type eventType, NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherAddress address) { }
        public NServiceBus_6.Routing.MessageDrivenSubscriptions.PublisherAddress Address { get; }
        public System.Type EventType { get; }
    }
}
namespace NServiceBus_6.Routing.StorageDrivenPublishing
{
    [System.ObsoleteAttribute("No longer an extension point, if you want to list events without subscribers you " +
        "can take a dependency on ISubscriptionStorage and query it for the event types y" +
        "ou want to check. Will be removed in version 7.0.0.", true)]
    public class SubscribersForEvent
    {
        public SubscribersForEvent(System.Collections.Generic.List<string> subscribers, System.Type eventType) { }
        public System.Type EventType { get; }
        public System.Collections.Generic.IEnumerable<string> Subscribers { get; }
    }
}
namespace NServiceBus_6.Sagas
{
    public class ActiveSagaInstance
    {
        public ActiveSagaInstance(NServiceBus_6.Saga saga, NServiceBus_6.Sagas.SagaMetadata metadata, System.Func<System.DateTime> currentUtcDateTimeProvider) { }
        public System.DateTime Created { get; }
        public NServiceBus_6.Saga Instance { get; }
        public bool IsNew { get; }
        public System.DateTime Modified { get; }
        public bool NotFound { get; }
        public string SagaId { get; }
        [System.ObsoleteAttribute("Use `.Metadata.SagaType` instead. The member currently throws a NotImplementedExc" +
            "eption. Will be removed in version 7.0.0.", true)]
        public System.Type SagaType { get; }
        public void AttachNewEntity(NServiceBus_6.IContainSagaData sagaEntity) { }
    }
    public interface IFinder { }
    public abstract class IFindSagas<T>
        where T : NServiceBus_6.IContainSagaData
    {
        protected IFindSagas() { }
        public interface Using<T, M> : NServiceBus_6.Sagas.IFinder
            where T : NServiceBus_6.IContainSagaData
        {
            System.Threading.Tasks.Task<T> FindBy(M message, NServiceBus_6.Persistence.SynchronizedStorageSession storageSession, NServiceBus_6.Extensibility.ReadOnlyContextBag context);
        }
    }
    public interface IHandleSagaNotFound
    {
        System.Threading.Tasks.Task Handle(object message, NServiceBus_6.IMessageProcessingContext context);
    }
    public interface ISagaIdGenerator
    {
        System.Guid Generate(NServiceBus_6.Sagas.SagaIdGeneratorContext context);
    }
    public interface ISagaPersister
    {
        System.Threading.Tasks.Task Complete(NServiceBus_6.IContainSagaData sagaData, NServiceBus_6.Persistence.SynchronizedStorageSession session, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task<TSagaData> Get<TSagaData>(System.Guid sagaId, NServiceBus_6.Persistence.SynchronizedStorageSession session, NServiceBus_6.Extensibility.ContextBag context)
            where TSagaData : NServiceBus_6.IContainSagaData;
        System.Threading.Tasks.Task<TSagaData> Get<TSagaData>(string propertyName, object propertyValue, NServiceBus_6.Persistence.SynchronizedStorageSession session, NServiceBus_6.Extensibility.ContextBag context)
            where TSagaData : NServiceBus_6.IContainSagaData;
        System.Threading.Tasks.Task Save(NServiceBus_6.IContainSagaData sagaData, NServiceBus_6.Sagas.SagaCorrelationProperty correlationProperty, NServiceBus_6.Persistence.SynchronizedStorageSession session, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task Update(NServiceBus_6.IContainSagaData sagaData, NServiceBus_6.Persistence.SynchronizedStorageSession session, NServiceBus_6.Extensibility.ContextBag context);
    }
    public class SagaCorrelationProperty
    {
        public SagaCorrelationProperty(string name, object value) { }
        public string Name { get; }
        public static NServiceBus_6.Sagas.SagaCorrelationProperty None { get; }
        public object Value { get; }
    }
    public class SagaFinderDefinition
    {
        public System.Type MessageType { get; }
        public string MessageTypeName { get; }
        public System.Collections.Generic.Dictionary<string, object> Properties { get; }
        public System.Type Type { get; }
    }
    public class SagaIdGeneratorContext : NServiceBus_6.Extensibility.IExtendable
    {
        public SagaIdGeneratorContext(NServiceBus_6.Sagas.SagaCorrelationProperty correlationProperty, NServiceBus_6.Sagas.SagaMetadata sagaMetadata, NServiceBus_6.Extensibility.ContextBag extensions) { }
        public NServiceBus_6.Sagas.SagaCorrelationProperty CorrelationProperty { get; }
        public NServiceBus_6.Extensibility.ContextBag Extensions { get; }
        public NServiceBus_6.Sagas.SagaMetadata SagaMetadata { get; }
    }
    public class SagaMessage
    {
        public bool IsAllowedToStartSaga { get; }
        public System.Type MessageType { get; }
        public string MessageTypeName { get; }
    }
    public class SagaMetadata
    {
        public SagaMetadata(string name, System.Type sagaType, string entityName, System.Type sagaEntityType, NServiceBus_6.Sagas.SagaMetadata.CorrelationPropertyMetadata correlationProperty, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Sagas.SagaMessage> messages, System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Sagas.SagaFinderDefinition> finders) { }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Sagas.SagaMessage> AssociatedMessages { get; }
        public string EntityName { get; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Sagas.SagaFinderDefinition> Finders { get; }
        public string Name { get; }
        public System.Type SagaEntityType { get; }
        public System.Type SagaType { get; }
        public static NServiceBus_6.Sagas.SagaMetadata Create(System.Type sagaType) { }
        public static NServiceBus_6.Sagas.SagaMetadata Create(System.Type sagaType, System.Collections.Generic.IEnumerable<System.Type> availableTypes, NServiceBus_6.Conventions conventions) { }
        public bool IsMessageAllowedToStartTheSaga(string messageType) { }
        public bool TryGetCorrelationProperty(out NServiceBus_6.Sagas.SagaMetadata.CorrelationPropertyMetadata property) { }
        public bool TryGetFinder(string messageType, out NServiceBus_6.Sagas.SagaFinderDefinition finderDefinition) { }
        public class CorrelationPropertyMetadata
        {
            public CorrelationPropertyMetadata(string name, System.Type type) { }
            public string Name { get; }
            public System.Type Type { get; }
        }
    }
    public class SagaMetadataCollection : System.Collections.Generic.IEnumerable<NServiceBus_6.Sagas.SagaMetadata>, System.Collections.IEnumerable
    {
        public SagaMetadataCollection() { }
        public NServiceBus_6.Sagas.SagaMetadata Find(System.Type sagaType) { }
        public NServiceBus_6.Sagas.SagaMetadata FindByEntity(System.Type entityType) { }
        public System.Collections.Generic.IEnumerator<NServiceBus_6.Sagas.SagaMetadata> GetEnumerator() { }
        public void Initialize(System.Collections.Generic.IEnumerable<System.Type> availableTypes) { }
        public void Initialize(System.Collections.Generic.IEnumerable<System.Type> availableTypes, NServiceBus_6.Conventions conventions) { }
    }
    [System.ObsoleteAttribute("There is no need for this attribute anymore, all mapped properties are automatica" +
        "lly correlated. Will be removed in version 7.0.0.", true)]
    public sealed class UniqueAttribute : System.Attribute
    {
        public UniqueAttribute() { }
        [System.ObsoleteAttribute("Use the new SagaMetadata. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        public static System.Collections.Generic.IDictionary<string, object> GetUniqueProperties(NServiceBus_6.IContainSagaData entity) { }
        [System.ObsoleteAttribute("Use the new SagaMetadata. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        public static System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetUniqueProperties(System.Type type) { }
        [System.ObsoleteAttribute("Use the new SagaMetadata. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        public static System.Reflection.PropertyInfo GetUniqueProperty(System.Type type) { }
        [System.ObsoleteAttribute("Use the new SagaMetadata. The member currently throws a NotImplementedException. " +
            "Will be removed in version 7.0.0.", true)]
        public static System.Nullable<System.Collections.Generic.KeyValuePair<string, object>> GetUniqueProperty(NServiceBus_6.IContainSagaData entity) { }
    }
}
namespace NServiceBus_6.Satellites
{
    [System.ObsoleteAttribute("No longer an extension point. Instead create a Feature and use FeatureConfigurati" +
        "onContext.AddSatelliteReceiver(...). Will be removed in version 7.0.0.", true)]
    public interface IAdvancedSatellite { }
    [System.ObsoleteAttribute("No longer an extension point. Instead create a Feature and use FeatureConfigurati" +
        "onContext.AddSatelliteReceiver(...). Will be removed in version 7.0.0.", true)]
    public interface ISatellite { }
}
namespace NServiceBus_6.SecondLevelRetries.Config
{
    [System.ObsoleteAttribute("Use `NServiceBus_6.SecondLevelRetriesSettings` instead. Will be removed in versio" +
        "n 7.0.0.", true)]
    public class SecondLevelRetriesSettings
    {
        public SecondLevelRetriesSettings() { }
        [System.ObsoleteAttribute("Use `NServiceBus_6.SecondLevelRetriesSettings.CustomRetryPolicy(Func<IncomingMess" +
            "age, TimeSpan> customPolicy)` instead. The member currently throws a NotImplemen" +
            "tedException. Will be removed in version 7.0.0.", true)]
        public void CustomRetryPolicy(System.Func<NServiceBus_6.TransportMessage, System.TimeSpan> customPolicy) { }
    }
}
namespace NServiceBus_6.Serialization
{
    [System.ObsoleteAttribute("To use a custom serializer derive from SerializationDefinition and provide a fact" +
        "ory method for creating the serializer instance. Will be removed in version 7.0." +
        "0.", true)]
    public abstract class ConfigureSerialization
    {
        protected ConfigureSerialization() { }
    }
    public interface IMessageSerializer
    {
        string ContentType { get; }
        object[] Deserialize(System.IO.Stream stream, System.Collections.Generic.IList<System.Type> messageTypes = null);
        void Serialize(object message, System.IO.Stream stream);
    }
    public abstract class SerializationDefinition
    {
        protected SerializationDefinition() { }
        public abstract System.Func<NServiceBus_6.MessageInterfaces.IMessageMapper, NServiceBus_6.Serialization.IMessageSerializer> Configure(NServiceBus_6.Settings.ReadOnlySettings settings);
    }
    public class SerializationExtensions<T> : NServiceBus_6.Configuration.AdvanceExtensibility.ExposeSettings
        where T : NServiceBus_6.Serialization.SerializationDefinition
    {
        public SerializationExtensions(NServiceBus_6.Settings.SettingsHolder settings) { }
    }
}
namespace NServiceBus_6.Serializers.Json
{
    [System.ObsoleteAttribute("Built-in serializers are internal. Switch to an alternative (e.g. Json.net) or co" +
        "py the serializer code. Will be removed in version 7.0.0.", true)]
    public class JsonMessageSerializer
    {
        public JsonMessageSerializer() { }
    }
}
namespace NServiceBus_6.Serializers.XML
{
    [System.ObsoleteAttribute("Built-in serializers are internal. Switch to an  alternative (e.g. XmlSerializer)" +
        " or copy the serializer code. Will be removed in version 7.0.0.", true)]
    public class XmlMessageSerializer
    {
        public XmlMessageSerializer() { }
    }
}
namespace NServiceBus_6.Settings.NServiceBus_6
{
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class static TransactionSettingsExtentions
    {
        [System.ObsoleteAttribute("No longer used, can safely be removed. The member currently throws a NotImplement" +
            "edException. Will be removed in version 7.0.0.", true)]
        public static NServiceBus_6.Settings.TransactionSettings Transactions(this NServiceBus_6.EndpointConfiguration config) { }
    }
}
namespace NServiceBus_6.Settings
{
    public interface ReadOnlySettings
    {
        T Get<T>();
        T Get<T>(string key);
        object Get(string key);
        T GetOrDefault<T>();
        T GetOrDefault<T>(string key);
        bool HasExplicitValue(string key);
        bool HasExplicitValue<T>();
        bool HasSetting(string key);
        bool HasSetting<T>();
        bool TryGet<T>(out T val);
        bool TryGet<T>(string key, out T val);
    }
    public class static ReadOnlySettingsExtensions
    {
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void ApplyTo<T>(NServiceBus_6.ObjectBuilder.IComponentConfig config) { }
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void ApplyTo(System.Type componentType, NServiceBus_6.ObjectBuilder.IComponentConfig config) { }
    }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public class ScaleOutSettings
    {
        public ScaleOutSettings() { }
        [System.ObsoleteAttribute("Not required any more as for MSMQ this is the default behavior and for other tran" +
            "sports the unique instance ID has to be provided. The member currently throws a " +
            "NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void UniqueQueuePerEndpointInstance() { }
        [System.ObsoleteAttribute("Use `EndpointConfiguration.MakeInstanceUniquelyAddressable(string discriminator)`" +
            " instead. The member currently throws a NotImplementedException. Will be removed" +
            " in version 7.0.0.", true)]
        public void UniqueQueuePerEndpointInstance(string discriminator) { }
        [System.ObsoleteAttribute("This is the default starting with V6. The member currently throws a NotImplemente" +
            "dException. Will be removed in version 7.0.0.", true)]
        public void UseSingleBrokerQueue() { }
        [System.ObsoleteAttribute("Not required any more as for MSMQ this is the default behavior and for other tran" +
            "sports the unique instance ID has to be provided. The member currently throws a " +
            "NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void UseUniqueBrokerQueuePerMachine() { }
    }
    public class SettingsHolder : NServiceBus_6.Settings.ReadOnlySettings
    {
        public SettingsHolder() { }
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void ApplyTo<T>(NServiceBus_6.ObjectBuilder.IComponentConfig config) { }
        [System.ObsoleteAttribute(@"Setting property values explicitly is no longer supported via this API. Use `.ConfigureComponent(b=> new MyMessageHandler(){ MyProperty = X})` to get full control over handler creation. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void ApplyTo(System.Type componentType, NServiceBus_6.ObjectBuilder.IComponentConfig config) { }
        public void Clear() { }
        public T Get<T>(string key) { }
        public T Get<T>() { }
        public object Get(string key) { }
        public T GetOrCreate<T>()
            where T :  class, new () { }
        public T GetOrDefault<T>() { }
        public T GetOrDefault<T>(string key) { }
        public bool HasExplicitValue(string key) { }
        public bool HasExplicitValue<T>() { }
        public bool HasSetting(string key) { }
        public bool HasSetting<T>() { }
        public void Set(string key, object value) { }
        public void Set<T>(object value) { }
        public void Set<T>(System.Action value) { }
        public void SetDefault<T>(object value) { }
        public void SetDefault<T>(System.Action value) { }
        public void SetDefault(string key, object value) { }
        [System.ObsoleteAttribute("Use `Set(string key, object value)` instead. The member currently throws a NotImp" +
            "lementedException. Will be removed in version 7.0.0.", true)]
        public void SetProperty<T>(System.Linq.Expressions.Expression<System.Func<T, object>> property, object value) { }
        [System.ObsoleteAttribute("Use `Set(string key, object value)` instead. The member currently throws a NotImp" +
            "lementedException. Will be removed in version 7.0.0.", true)]
        public void SetPropertyDefault<T>(System.Linq.Expressions.Expression<System.Func<T, object>> property, object value) { }
        public bool TryGet<T>(out T val) { }
        public bool TryGet<T>(string key, out T val) { }
    }
    public class TransactionSettings
    {
        public TransactionSettings() { }
        [System.ObsoleteAttribute("Use `config.UnitOfWork().WrapHandlersInATransactionScope(timeout: TimeSpan.FromSe" +
            "conds(X));` instead. The member currently throws a NotImplementedException. Will" +
            " be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings DefaultTimeout(System.TimeSpan defaultTimeout) { }
        [System.ObsoleteAttribute("Use `config.UseTransport<MyTransport>().Transactions(TransportTransactionMode.Non" +
            "e);` instead. The member currently throws a NotImplementedException. Will be rem" +
            "oved in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings Disable() { }
        [System.ObsoleteAttribute("Use `config.UseTransport<MyTransport>().Transactions(TransportTransactionMode.Rec" +
            "eiveOnly|TransportTransactionMode.SendsAtomicWithReceive);` instead. The member " +
            "currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings DisableDistributedTransactions() { }
        [System.ObsoleteAttribute(@"DoNotWrapHandlersExecutionInATransactionScope() has been removed since transaction scopes are no longer used by non DTC transports delay the dispatch of all outgoing operations until handlers have been executed.\r\nIn Version 6 handlers will only be wrapped in a transactionscope if running the MSMQ or SQLServer transports in default mode. This means that performing storage operations against data sources also supporting transaction scopes\r\nwill escalate to a distributed transaction. Previous versions allowed opting out of this behavior using config.Transactions().DoNotWrapHandlersExecutionInATransactionScope(). In Version 6 it's recommended to use `EndpointConfiguration.UseTransport<MyTransport>().Transactions(TransportTransactionMode.ReceiveOnly)` to lean on native transport transaction and the new batched dispatch support to achieve the same level of consistency with better performance.\r\nSuppressing the ambient transaction created by the MSMQ and SQL Server transports can still be achieved by creating a custom pipeline behavior with a suppressed transaction scope. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings DoNotWrapHandlersExecutionInATransactionScope() { }
        [System.ObsoleteAttribute("Use `config.UseTransport<MyTransport>().Transactions(TransportTransactionMode.Rec" +
            "eiveOnly|TransportTransactionMode.SendsAtomicWithReceive);` instead. The member " +
            "currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings Enable() { }
        [System.ObsoleteAttribute("Use `config.UseTransport<MyTransport>().Transactions(TransportTransactionMode.Tra" +
            "nsactionScope);` instead. The member currently throws a NotImplementedException." +
            " Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings EnableDistributedTransactions() { }
        [System.ObsoleteAttribute("Use `config.UnitOfWork().WrapHandlersInATransactionScope(isolationLevel: Isolatio" +
            "nLevel.X);` instead. The member currently throws a NotImplementedException. Will" +
            " be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings IsolationLevel(System.Transactions.IsolationLevel isolationLevel) { }
        [System.ObsoleteAttribute("Use `config.UnitOfWork().WrapHandlersInATransactionScope();` instead. The member " +
            "currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Settings.TransactionSettings WrapHandlersExecutionInATransactionScope() { }
    }
}
namespace NServiceBus_6.Support
{
    public class static RuntimeEnvironment
    {
        public static string MachineName { get; }
        public static System.Func<string> MachineNameAction { get; set; }
    }
}
namespace NServiceBus_6.Timeout.Core
{
    public interface IPersistTimeouts
    {
        System.Threading.Tasks.Task Add(NServiceBus_6.Timeout.Core.TimeoutData timeout, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task<NServiceBus_6.Timeout.Core.TimeoutData> Peek(string timeoutId, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task RemoveTimeoutBy(System.Guid sagaId, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task<bool> TryRemove(string timeoutId, NServiceBus_6.Extensibility.ContextBag context);
    }
    public interface IQueryTimeouts
    {
        System.Threading.Tasks.Task<NServiceBus_6.Timeout.Core.TimeoutsChunk> GetNextChunk(System.DateTime startSlice);
    }
    public class TimeoutData
    {
        [System.ObsoleteAttribute("Not used anymore. Will be removed in version 7.0.0.", true)]
        public const string OriginalReplyToAddress = "NServiceBus.Timeout.ReplyToAddress";
        public TimeoutData() { }
        public string Destination { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
        public string OwningTimeoutManager { get; set; }
        public System.Guid SagaId { get; set; }
        public byte[] State { get; set; }
        public System.DateTime Time { get; set; }
        [System.ObsoleteAttribute("Use new SendOptions() instead. The member currently throws a NotImplementedExcept" +
            "ion. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Unicast.SendOptions ToSendOptions(NServiceBus_6.Address replyToAddress) { }
        [System.ObsoleteAttribute("Use new SendOptions() instead. The member currently throws a NotImplementedExcept" +
            "ion. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Unicast.SendOptions ToSendOptions(string replyToAddress) { }
        public override string ToString() { }
        [System.ObsoleteAttribute("Use new OutgoingMessage(timeoutData.State) instead. The member currently throws a" +
            " NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.TransportMessage ToTransportMessage() { }
    }
    public class TimeoutsChunk
    {
        public TimeoutsChunk(Timeout[] dueTimeouts, System.DateTime nextTimeToQuery) { }
        public Timeout[] DueTimeouts { get; }
        public System.DateTime NextTimeToQuery { get; }
        public struct Timeout
        {
            public Timeout(string id, System.DateTime dueTime) { }
            public System.DateTime DueTime { get; }
            public string Id { get; }
        }
    }
}
namespace NServiceBus_6.Transport
{
    public enum DispatchConsistency
    {
        Default = 1,
        Isolated = 2,
    }
    public class ErrorContext
    {
        public ErrorContext(System.Exception exception, System.Collections.Generic.Dictionary<string, string> headers, string transportMessageId, byte[] body, NServiceBus_6.Transport.TransportTransaction transportTransaction, int immediateProcessingFailures) { }
        public int DelayedDeliveriesPerformed { get; }
        public System.Exception Exception { get; }
        public int ImmediateProcessingFailures { get; }
        public NServiceBus_6.Transport.IncomingMessage Message { get; }
        public NServiceBus_6.Transport.TransportTransaction TransportTransaction { get; }
    }
    public enum ErrorHandleResult
    {
        Handled = 0,
        RetryRequired = 1,
    }
    public interface ICancelDeferredMessages
    {
        System.Threading.Tasks.Task CancelDeferredMessages(string messageKey, NServiceBus_6.Pipeline.IBehaviorContext context);
    }
    public interface ICreateQueues
    {
        System.Threading.Tasks.Task CreateQueueIfNecessary(NServiceBus_6.Transport.QueueBindings queueBindings, string identity);
    }
    public interface IDispatchMessages
    {
        System.Threading.Tasks.Task Dispatch(NServiceBus_6.Transport.TransportOperations outgoingMessages, NServiceBus_6.Transport.TransportTransaction transaction, NServiceBus_6.Extensibility.ContextBag context);
    }
    public interface IManageSubscriptions
    {
        System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus_6.Extensibility.ContextBag context);
    }
    public class IncomingMessage
    {
        public IncomingMessage(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body) { }
        public byte[] Body { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
    }
    public class static IncomingMessageExtensions
    {
        public static NServiceBus_6.MessageIntentEnum GetMesssageIntent(this NServiceBus_6.Transport.IncomingMessage message) { }
        public static string GetReplyToAddress(this NServiceBus_6.Transport.IncomingMessage message) { }
    }
    public interface IOutgoingTransportOperation
    {
        System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> DeliveryConstraints { get; }
        NServiceBus_6.Transport.OutgoingMessage Message { get; }
        NServiceBus_6.Transport.DispatchConsistency RequiredDispatchConsistency { get; }
    }
    public interface IPushMessages
    {
        System.Threading.Tasks.Task Init(System.Func<NServiceBus_6.Transport.MessageContext, System.Threading.Tasks.Task> onMessage, System.Func<NServiceBus_6.Transport.ErrorContext, System.Threading.Tasks.Task<NServiceBus_6.Transport.ErrorHandleResult>> onError, NServiceBus_6.CriticalError criticalError, NServiceBus_6.Transport.PushSettings settings);
        void Start(NServiceBus_6.Transport.PushRuntimeSettings limitations);
        System.Threading.Tasks.Task Stop();
    }
    public class static LogicalAddressExtensions
    {
        public static string GetTransportAddress(this NServiceBus_6.Settings.ReadOnlySettings settings, NServiceBus_6.LogicalAddress logicalAddress) { }
    }
    public class MessageContext : NServiceBus_6.Extensibility.IExtendable
    {
        public MessageContext(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body, NServiceBus_6.Transport.TransportTransaction transportTransaction, System.Threading.CancellationTokenSource receiveCancellationTokenSource, NServiceBus_6.Extensibility.ContextBag context) { }
        public byte[] Body { get; }
        [System.ObsoleteAttribute("Use `Extensions` instead. Will be treated as an error from version 7.0.0. Will be" +
            " removed in version 7.0.0.", false)]
        public NServiceBus_6.Extensibility.ContextBag Context { get; }
        public NServiceBus_6.Extensibility.ContextBag Extensions { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
        public System.Threading.CancellationTokenSource ReceiveCancellationTokenSource { get; }
        public NServiceBus_6.Transport.TransportTransaction TransportTransaction { get; }
    }
    public class MulticastTransportOperation : NServiceBus_6.Transport.IOutgoingTransportOperation
    {
        public MulticastTransportOperation(NServiceBus_6.Transport.OutgoingMessage message, System.Type messageType, NServiceBus_6.Transport.DispatchConsistency requiredDispatchConsistency = 1, System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> deliveryConstraints = null) { }
        public System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> DeliveryConstraints { get; }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; }
        public System.Type MessageType { get; }
        public NServiceBus_6.Transport.DispatchConsistency RequiredDispatchConsistency { get; }
    }
    public class OutboundRoutingPolicy
    {
        public OutboundRoutingPolicy(NServiceBus_6.Transport.OutboundRoutingType sends, NServiceBus_6.Transport.OutboundRoutingType publishes, NServiceBus_6.Transport.OutboundRoutingType replies) { }
        public NServiceBus_6.Transport.OutboundRoutingType Publishes { get; }
        public NServiceBus_6.Transport.OutboundRoutingType Replies { get; }
        public NServiceBus_6.Transport.OutboundRoutingType Sends { get; }
    }
    public enum OutboundRoutingType
    {
        Unicast = 0,
        Multicast = 1,
    }
    public class OutgoingMessage
    {
        public OutgoingMessage(string messageId, System.Collections.Generic.Dictionary<string, string> headers, byte[] body) { }
        public byte[] Body { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
    }
    public class PushRuntimeSettings
    {
        public PushRuntimeSettings() { }
        public PushRuntimeSettings(int maxConcurrency) { }
        public static NServiceBus_6.Transport.PushRuntimeSettings Default { get; }
        public int MaxConcurrency { get; }
    }
    public class PushSettings
    {
        public PushSettings(string inputQueue, string errorQueue, bool purgeOnStartup, NServiceBus_6.TransportTransactionMode requiredTransactionMode) { }
        public string ErrorQueue { get; }
        public string InputQueue { get; }
        public bool PurgeOnStartup { get; }
        public NServiceBus_6.TransportTransactionMode RequiredTransactionMode { get; }
    }
    public class QueueBindings
    {
        public QueueBindings() { }
        public System.Collections.Generic.IReadOnlyCollection<string> ReceivingAddresses { get; }
        public System.Collections.Generic.IReadOnlyCollection<string> SendingAddresses { get; }
        public void BindReceiving(string address) { }
        public void BindSending(string transportAddress) { }
    }
    public class StartupCheckResult
    {
        public static readonly NServiceBus_6.Transport.StartupCheckResult Success;
        public string ErrorMessage { get; }
        public bool Succeeded { get; }
        public static NServiceBus_6.Transport.StartupCheckResult Failed(string errorMessage) { }
    }
    public abstract class TransportDefinition
    {
        protected TransportDefinition() { }
        public abstract string ExampleConnectionStringForErrorMessage { get; }
        [System.ObsoleteAttribute("Use TransportInfrastructure.OutboundRoutingPolicy.Publishes == OutboundRoutingTyp" +
            "e.Multicast instead. The member currently throws a NotImplementedException. Will" +
            " be removed in version 7.0.0.", true)]
        public bool HasNativePubSubSupport { get; set; }
        [System.ObsoleteAttribute("The concept of centralized publish and subscribe is no longer available. The memb" +
            "er currently throws a NotImplementedException. Will be removed in version 7.0.0." +
            "", true)]
        public bool HasSupportForCentralizedPubSub { get; set; }
        [System.ObsoleteAttribute("Use TransportInfrastructure.TransactionMode == TransportTransactionMode.Transacti" +
            "onScope instead. The member currently throws a NotImplementedException. Will be " +
            "removed in version 7.0.0.", true)]
        public System.Nullable<bool> HasSupportForDistributedTransactions { get; set; }
        [System.ObsoleteAttribute("Use TransportInfrastructure.TransactionMode == TransportTransactionMode.SendsAtom" +
            "icWithReceive instead. The member currently throws a NotImplementedException. Wi" +
            "ll be removed in version 7.0.0.", true)]
        public bool HasSupportForMultiQueueNativeTransactions { get; set; }
        public virtual bool RequiresConnectionString { get; }
        public abstract NServiceBus_6.Transport.TransportInfrastructure Initialize(NServiceBus_6.Settings.SettingsHolder settings, string connectionString);
    }
    public abstract class TransportInfrastructure
    {
        protected TransportInfrastructure() { }
        public abstract System.Collections.Generic.IEnumerable<System.Type> DeliveryConstraints { get; }
        public abstract NServiceBus_6.Transport.OutboundRoutingPolicy OutboundRoutingPolicy { get; }
        [System.ObsoleteAttribute("The outbox consent is no longer required. It is safe to ignore this property. Wil" +
            "l be treated as an error from version 7.0.0. Will be removed in version 8.0.0.", false)]
        public bool RequireOutboxConsent { get; set; }
        public abstract NServiceBus_6.TransportTransactionMode TransactionMode { get; }
        public abstract NServiceBus_6.Routing.EndpointInstance BindToLocalEndpoint(NServiceBus_6.Routing.EndpointInstance instance);
        public abstract NServiceBus_6.Transport.TransportReceiveInfrastructure ConfigureReceiveInfrastructure();
        public abstract NServiceBus_6.Transport.TransportSendInfrastructure ConfigureSendInfrastructure();
        public abstract NServiceBus_6.Transport.TransportSubscriptionInfrastructure ConfigureSubscriptionInfrastructure();
        public virtual string MakeCanonicalForm(string transportAddress) { }
        public virtual System.Threading.Tasks.Task Start() { }
        public virtual System.Threading.Tasks.Task Stop() { }
        public abstract string ToTransportAddress(NServiceBus_6.LogicalAddress logicalAddress);
    }
    public class TransportOperation
    {
        public TransportOperation(NServiceBus_6.Transport.OutgoingMessage message, NServiceBus_6.Routing.AddressTag addressTag, NServiceBus_6.Transport.DispatchConsistency requiredDispatchConsistency = 1, System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> deliveryConstraints = null) { }
        public NServiceBus_6.Routing.AddressTag AddressTag { get; }
        public System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> DeliveryConstraints { get; }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; }
        public NServiceBus_6.Transport.DispatchConsistency RequiredDispatchConsistency { get; set; }
    }
    public class TransportOperations
    {
        public TransportOperations(params NServiceBus_6.Transport.TransportOperation[] transportOperations) { }
        public System.Collections.Generic.List<NServiceBus_6.Transport.MulticastTransportOperation> MulticastTransportOperations { get; }
        public System.Collections.Generic.List<NServiceBus_6.Transport.UnicastTransportOperation> UnicastTransportOperations { get; }
    }
    public class TransportReceiveInfrastructure
    {
        public TransportReceiveInfrastructure(System.Func<NServiceBus_6.Transport.IPushMessages> messagePumpFactory, System.Func<NServiceBus_6.Transport.ICreateQueues> queueCreatorFactory, System.Func<System.Threading.Tasks.Task<NServiceBus_6.Transport.StartupCheckResult>> preStartupCheck) { }
        public System.Func<NServiceBus_6.Transport.IPushMessages> MessagePumpFactory { get; }
        public System.Func<NServiceBus_6.Transport.ICreateQueues> QueueCreatorFactory { get; }
    }
    public class TransportSendInfrastructure
    {
        public TransportSendInfrastructure(System.Func<NServiceBus_6.Transport.IDispatchMessages> dispatcherFactory, System.Func<System.Threading.Tasks.Task<NServiceBus_6.Transport.StartupCheckResult>> preStartupCheck) { }
        public System.Func<NServiceBus_6.Transport.IDispatchMessages> DispatcherFactory { get; }
    }
    public class TransportSubscriptionInfrastructure
    {
        public TransportSubscriptionInfrastructure(System.Func<NServiceBus_6.Transport.IManageSubscriptions> subscriptionManagerFactory) { }
    }
    public sealed class TransportTransaction : NServiceBus_6.Extensibility.ContextBag
    {
        public TransportTransaction() { }
    }
    public class UnicastTransportOperation : NServiceBus_6.Transport.IOutgoingTransportOperation
    {
        public UnicastTransportOperation(NServiceBus_6.Transport.OutgoingMessage message, string destination, NServiceBus_6.Transport.DispatchConsistency requiredDispatchConsistency = 1, System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> deliveryConstraints = null) { }
        public System.Collections.Generic.List<NServiceBus_6.DeliveryConstraints.DeliveryConstraint> DeliveryConstraints { get; }
        public string Destination { get; }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; }
        public NServiceBus_6.Transport.DispatchConsistency RequiredDispatchConsistency { get; }
    }
}
namespace NServiceBus_6.Transport.Msmq
{
    public class HeaderInfo
    {
        public HeaderInfo() { }
        public string Key { get; set; }
        public string Value { get; set; }
    }
}
namespace NServiceBus_6.Transports
{
    [System.ObsoleteAttribute("No longer used, safe to remove. Will be removed in version 7.0.0.", true)]
    public interface IAuditMessages { }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.IDispatchMessages` instead. Will be removed in versi" +
        "on 7.0.0.", true)]
    public interface IDeferMessages
    {
        [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.ICancelDeferredMessages` instead. Will be removed in" +
            " version 7.0.0.", true)]
        void ClearDeferredMessages(string headerKey, string headerValue);
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.IPushMessages` instead. Will be removed in version 7" +
        ".0.0.", true)]
    public interface IDequeueMessages
    {
        void Init(NServiceBus_6.Address address, NServiceBus_6.Unicast.Transport.TransactionSettings transactionSettings, System.Func<NServiceBus_6.TransportMessage, bool> tryProcessMessage, System.Action<NServiceBus_6.TransportMessage, System.Exception> endProcessMessage);
        void Start(int maximumConcurrencyLevel);
        void Stop();
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.IDispatchMessages` instead. Will be removed in versi" +
        "on 7.0.0.", true)]
    public interface IPublishMessages { }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.IDispatchMessages` instead. Will be removed in versi" +
        "on 7.0.0.", true)]
    public interface ISendMessages
    {
        void Send(NServiceBus_6.TransportMessage message, NServiceBus_6.Unicast.SendOptions sendOptions);
    }
    [System.ObsoleteAttribute("The namespace NServiceBus_6.Transports was renamed to NServiceBus_6.Transport. Us" +
        "e `NServiceBus_6.Transport.TransportDefinition` instead. Will be removed in vers" +
        "ion 7.0.0.", true)]
    public abstract class TransportDefinition
    {
        protected TransportDefinition() { }
    }
}
namespace NServiceBus_6.Transports.Msmq.Config
{
    [System.ObsoleteAttribute("No longer available, see the documentation for native sends for alternative solut" +
        "ions. Will be removed in version 7.0.0.", true)]
    public class MsmqSettings
    {
        public MsmqSettings() { }
    }
}
namespace NServiceBus_6.Transports.Msmq
{
    [System.ObsoleteAttribute("No longer available, resolve an instance of IPushMessages from the container inst" +
        "ead. Will be removed in version 7.0.0.", true)]
    public class MsmqDequeueStrategy
    {
        public MsmqDequeueStrategy() { }
    }
    [System.ObsoleteAttribute("No longer available, see the documentation for native sends for alternative solut" +
        "ions. Will be removed in version 7.0.0.", true)]
    public class MsmqMessageSender
    {
        public MsmqMessageSender() { }
    }
    [System.ObsoleteAttribute("The msmq transaction is now available via the pipeline context. Will be removed i" +
        "n version 7.0.0.", true)]
    public class MsmqUnitOfWork
    {
        public MsmqUnitOfWork() { }
    }
}
namespace NServiceBus_6.Unicast.Behaviors
{
    public class MessageHandler
    {
        [System.ObsoleteAttribute("Use `NServiceBus_6.Pipeline.MessageHandler(Action<object, object, object> invocat" +
            "ion, Type handlerType)` instead. Will be removed in version 7.0.0.", true)]
        public MessageHandler() { }
        [System.ObsoleteAttribute("Use `NServiceBus_6.Pipeline.MessageHandler.Invoke` instead. The member currently " +
            "throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public System.Action<object, object> Invocation { get; set; }
    }
}
namespace NServiceBus_6.Unicast
{
    public class static BuilderExtensions
    {
        public static void ForEach<T>(this NServiceBus_6.ObjectBuilder.IBuilder builder, System.Action<T> action) { }
    }
    [System.ObsoleteAttribute("No longer used, use the new callbacks api described in the version 6 upgrade guid" +
        "e. Will be removed in version 7.0.0.", true)]
    public class BusAsyncResult
    {
        public BusAsyncResult() { }
    }
    public class DeliveryMessageOptions
    {
        public DeliveryMessageOptions() { }
        [System.ObsoleteAttribute("Use the ConsistencyGuarantee class instead. The member currently throws a NotImpl" +
            "ementedException. Will be removed in version 7.0.0.", true)]
        public bool EnlistInReceiveTransaction { get; set; }
        [System.ObsoleteAttribute("Use context.TryGetDeliveryConstraint<NonDurableDelivery> instead. The member curr" +
            "ently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public System.Nullable<bool> NonDurable { get; set; }
        [System.ObsoleteAttribute("Use context.TryGetDeliveryConstraint<DiscardIfNotReceivedBefore> instead. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 7.0.0" +
            ".", true)]
        public System.Nullable<System.TimeSpan> TimeToBeReceived { get; set; }
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.UnicastBus.DeliveryMessageOptions` instead. Will be removed in" +
        " version 7.0.0.", true)]
    public abstract class DeliveryOptions
    {
        protected DeliveryOptions() { }
        [System.ObsoleteAttribute("Turn best practices check off using configuration.DisableFeature<BestPracticeEnfo" +
            "rcement>(). The member currently throws a NotImplementedException. Will be remov" +
            "ed in version 7.0.0.", true)]
        public bool EnforceMessagingBestPractices { get; set; }
        [System.ObsoleteAttribute("Reply to address can be get/set using the `NServiceBus.ReplyToAddress` header. Th" +
            "e member currently throws a NotImplementedException. Will be removed in version " +
            "7.0.0.", true)]
        public string ReplyToAddress { get; set; }
    }
    [System.ObsoleteAttribute("Not a public API. Use `MessageHandlerRegistry` instead. Will be removed in versio" +
        "n 7.0.0.", true)]
    public interface IMessageHandlerRegistry { }
    [System.ObsoleteAttribute("Will be removed in version 7.0.0.", true)]
    public class MessageContext
    {
        public MessageContext() { }
    }
    public class MessageEventArgs : System.EventArgs
    {
        public MessageEventArgs(object msg) { }
        public object Message { get; }
    }
    public class MessageHandlerRegistry
    {
        [System.ObsoleteAttribute("Use `MessageHandlerRegistry.RegisterHandler(Type handlerType)` instead. The membe" +
            "r currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void CacheMethodForHandler(System.Type handler, System.Type messageType) { }
        public void Clear() { }
        public System.Collections.Generic.List<NServiceBus_6.Pipeline.MessageHandler> GetHandlersFor(System.Type messageType) { }
        [System.ObsoleteAttribute("Use `MessageHandlerRegistry.GetHandlersFor(Type messageType)` instead. The member" +
            " currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public System.Collections.Generic.IEnumerable<System.Type> GetHandlerTypes(System.Type messageType) { }
        public System.Collections.Generic.IEnumerable<System.Type> GetMessageTypes() { }
        [System.ObsoleteAttribute("Use `MessageHandler.Invoke(object message, object context)` instead. The member c" +
            "urrently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void InvokeHandle(object handler, object message) { }
        [System.ObsoleteAttribute("Use `MessageHandler.Invoke(object message, object context)` instead. The member c" +
            "urrently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public void InvokeTimeout(object handler, object state) { }
        public void RegisterHandler(System.Type handlerType) { }
    }
    public class MessagesEventArgs : System.EventArgs
    {
        public MessagesEventArgs(object[] messages) { }
        public object[] Messages { get; }
    }
    [System.ObsoleteAttribute("Use context.Intent to detect of the message is a event being published and use co" +
        "ntext.MessageType to get the actual event type. Will be removed in version 7.0.0" +
        ".", true)]
    public class PublishOptions : NServiceBus_6.Unicast.DeliveryOptions
    {
        public PublishOptions() { }
    }
    [System.ObsoleteAttribute("Not used anymore, use the \'NServiceBus.MessageIntent\' header to detect if the mes" +
        "sage is a reply. Will be removed in version 7.0.0.", true)]
    public class ReplyOptions
    {
        public ReplyOptions() { }
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.UnicastBus.SendMessageOptions` instead. Will be removed in ver" +
        "sion 7.0.0.", true)]
    public class SendOptions : NServiceBus_6.Unicast.DeliveryOptions
    {
        [System.ObsoleteAttribute("Use `SendMessageOptions(string)` instead. The member currently throws a NotImplem" +
            "entedException. Will be removed in version 7.0.0.", true)]
        public SendOptions(NServiceBus_6.Address destination) { }
        [System.ObsoleteAttribute("Reply to address can be get/set using the `NServiceBus.CorrelationId` header. The" +
            " member currently throws a NotImplementedException. Will be removed in version 7" +
            ".0.0.", true)]
        public string CorrelationId { get; set; }
        [System.ObsoleteAttribute("Use `DelayDeliveryFor` instead. The member currently throws a NotImplementedExcep" +
            "tion. Will be removed in version 7.0.0.", true)]
        public System.Nullable<System.TimeSpan> DelayDeliveryWith { get; set; }
    }
    [System.ObsoleteAttribute("UnicastBus has been made internal. Use IEndpointInstance instead. Will be removed" +
        " in version 7.0.0.", true)]
    public class UnicastBus
    {
        public UnicastBus() { }
    }
}
namespace NServiceBus_6.Unicast.Messages
{
    public class MessageMetadata
    {
        public MessageMetadata(System.Type messageType) { }
        public MessageMetadata(System.Type messageType, System.Type[] messageHierarchy) { }
        public System.Type[] MessageHierarchy { get; }
        public System.Type MessageType { get; }
        [System.ObsoleteAttribute("You can access Recoverable via the DeliveryConstraints collection on the outgoing" +
            " context, the new constraint is called NonDurableDelivery. The member currently " +
            "throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public bool Recoverable { get; }
        [System.ObsoleteAttribute("You can access TTBR via the DeliveryConstraints collection on the outgoing contex" +
            "t. The member currently throws a NotImplementedException. Will be removed in ver" +
            "sion 7.0.0.", true)]
        public System.TimeSpan TimeToBeReceived { get; }
    }
    public class MessageMetadataRegistry
    {
        public NServiceBus_6.Unicast.Messages.MessageMetadata GetMessageMetadata(System.Type messageType) { }
        public NServiceBus_6.Unicast.Messages.MessageMetadata GetMessageMetadata(string messageTypeIdentifier) { }
    }
}
namespace NServiceBus_6.Unicast.Queuing
{
    [System.ObsoleteAttribute("Use `QueueBindings` instead. Will be removed in version 7.0.0.", true)]
    public interface IWantQueueCreated { }
    public class QueueNotFoundException : System.Exception
    {
        public QueueNotFoundException() { }
        [System.ObsoleteAttribute("Use `QueueNotFoundException(string queue, string message, Exception inner)` inste" +
            "ad. The member currently throws a NotImplementedException. Will be removed in ve" +
            "rsion 7.0.0.", true)]
        public QueueNotFoundException(NServiceBus_6.Address queue, string message, System.Exception inner) { }
        public QueueNotFoundException(string queue, string message, System.Exception inner) { }
        protected QueueNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public string Queue { get; set; }
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
}
namespace NServiceBus_6.Unicast.Routing
{
    [System.ObsoleteAttribute("No longer used, safe to remove. Will be removed in version 7.0.0.", true)]
    public class StaticMessageRouter
    {
        public StaticMessageRouter() { }
        [System.ObsoleteAttribute("Use `config.AutoSubscribe().AutoSubscribePlainMessages()` instead. The member cur" +
            "rently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public bool SubscribeToPlainMessages { get; set; }
    }
}
namespace NServiceBus_6.Unicast.Subscriptions.MessageDrivenSubscriptions
{
    public interface IInitializableSubscriptionStorage : NServiceBus_6.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage
    {
        void Init();
    }
    public interface ISubscriptionStorage
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NServiceBus_6.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber>> GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable<NServiceBus_6.Unicast.Subscriptions.MessageType> messageTypes, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task Subscribe(NServiceBus_6.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber subscriber, NServiceBus_6.Unicast.Subscriptions.MessageType messageType, NServiceBus_6.Extensibility.ContextBag context);
        System.Threading.Tasks.Task Unsubscribe(NServiceBus_6.Unicast.Subscriptions.MessageDrivenSubscriptions.Subscriber subscriber, NServiceBus_6.Unicast.Subscriptions.MessageType messageType, NServiceBus_6.Extensibility.ContextBag context);
    }
    public class Subscriber
    {
        public Subscriber(string transportAddress, string endpoint) { }
        public string Endpoint { get; }
        public string TransportAddress { get; }
    }
}
namespace NServiceBus_6.Unicast.Subscriptions
{
    public class MessageType
    {
        public MessageType(System.Type type) { }
        public MessageType(string messageTypeString) { }
        public MessageType(string typeName, string versionString) { }
        public MessageType(string typeName, System.Version version) { }
        public string TypeName { get; }
        public System.Version Version { get; }
        public bool Equals(NServiceBus_6.Unicast.Subscriptions.MessageType other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    [System.ObsoleteAttribute("No longer used, safe to remove. Will be removed in version 7.0.0.", true)]
    public class SubscriptionEventArgs
    {
        public SubscriptionEventArgs() { }
    }
}
namespace NServiceBus_6.Unicast.Transport
{
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class static ControlMessage { }
    public class static ControlMessageFactory
    {
        public static NServiceBus_6.Transport.OutgoingMessage Create(NServiceBus_6.MessageIntentEnum intent) { }
    }
    [System.ObsoleteAttribute("Use the pipeline to catch failures. Will be removed in version 7.0.0.", true)]
    public class FailedMessageProcessingEventArgs : System.EventArgs
    {
        public FailedMessageProcessingEventArgs() { }
    }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class FinishedMessageProcessingEventArgs : System.EventArgs
    {
        public FinishedMessageProcessingEventArgs() { }
    }
    [System.ObsoleteAttribute("Use `NServiceBus_6.Transport.IPushMessages` instead. Will be removed in version 7" +
        ".0.0.", true)]
    public interface ITransport { }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class StartedMessageProcessingEventArgs
    {
        public StartedMessageProcessingEventArgs() { }
    }
    [System.ObsoleteAttribute("Transaction settings is no longer available via this class. See obsoletes on indi" +
        "vidual members for further details. Will be removed in version 7.0.0.", true)]
    public class TransactionSettings
    {
        [System.ObsoleteAttribute("No longer used. Will be removed in version 7.0.0.", true)]
        public TransactionSettings(bool isTransactional, System.TimeSpan transactionTimeout, System.Transactions.IsolationLevel isolationLevel, bool suppressDistributedTransactions, bool doNotWrapHandlersExecutionInATransactionScope) { }
        [System.ObsoleteAttribute("DoNotWrapHandlersExecutionInATransactionScope is no longer used here. Use setting" +
            "s.GetOrDefault<bool>(\'Transactions.DoNotWrapHandlersExecutionInATransactionScope" +
            "\') instead. Will be removed in version 7.0.0.", true)]
        public bool DoNotWrapHandlersExecutionInATransactionScope { get; set; }
        [System.ObsoleteAttribute("Isolation level are now controlled explicitly for the transaction scope unit of w" +
            "ork using config.UnitOfWork().WrapHandlersInATransactionScope(isolationlevel: X)" +
            ". Will be removed in version 7.0.0.", true)]
        public System.Transactions.IsolationLevel IsolationLevel { get; set; }
        [System.ObsoleteAttribute("IsTransactional is no longer used here. Use `context.Settings.GetRequiredTransact" +
            "ionModeForReceives() != Transactions.None` instead. Will be removed in version 7" +
            ".0.0.", true)]
        public bool IsTransactional { get; set; }
        [System.ObsoleteAttribute("SuppressDistributedTransactions is no longer used here. Use `context.Settings.Get" +
            "RequiredTransactionModeForReceives() != Transactions.TransactionScope` instead. " +
            "Will be removed in version 7.0.0.", true)]
        public bool SuppressDistributedTransactions { get; set; }
        [System.ObsoleteAttribute("Timeouts are now controlled explicitly for the transaction scope unit of work usi" +
            "ng config.UnitOfWork().WrapHandlersInATransactionScope(timeout: X). Will be remo" +
            "ved in version 7.0.0.", true)]
        public System.TimeSpan TransactionTimeout { get; set; }
    }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class TransportMessageAvailableEventArgs
    {
        public TransportMessageAvailableEventArgs() { }
    }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class TransportMessageReceivedEventArgs
    {
        public TransportMessageReceivedEventArgs() { }
    }
    [System.ObsoleteAttribute("No longer used, can safely be removed. Will be removed in version 7.0.0.", true)]
    public class TransportReceiver
    {
        public TransportReceiver() { }
    }
}
namespace NServiceBus_6.UnitOfWork
{
    public interface IManageUnitsOfWork
    {
        System.Threading.Tasks.Task Begin();
        System.Threading.Tasks.Task End(System.Exception ex = null);
    }
}